
RTC_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d34  08004d34  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d34  08004d34  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d34  08004d34  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d34  08004d34  00014d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000006c  08004da8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004da8  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010225  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002427  00000000  00000000  000302fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  00032728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb5  00000000  00000000  00033750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f0f  00000000  00000000  00034405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c09  00000000  00000000  0004c314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d2b0  00000000  00000000  0005ff1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004980  00000000  00000000  000ed1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000f1b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c40 	.word	0x08004c40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08004c40 	.word	0x08004c40

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_PeriodElapsedCallback>:

uint8_t demo_track = 1;
uint8_t track_num = 1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if(htim->Instance == htim2.Instance)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681a      	ldr	r2, [r3, #0]
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	429a      	cmp	r2, r3
 800016e:	d121      	bne.n	80001b4 <HAL_TIM_PeriodElapsedCallback+0x58>
  {
	  if(display_timer.sec == 59)
 8000170:	4b14      	ldr	r3, [pc, #80]	; (80001c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000172:	789b      	ldrb	r3, [r3, #2]
 8000174:	2b3b      	cmp	r3, #59	; 0x3b
 8000176:	d117      	bne.n	80001a8 <HAL_TIM_PeriodElapsedCallback+0x4c>
	  {

		  display_timer.sec = 0;
 8000178:	4b12      	ldr	r3, [pc, #72]	; (80001c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800017a:	2200      	movs	r2, #0
 800017c:	709a      	strb	r2, [r3, #2]
		  if(display_timer.min == 59)
 800017e:	4b11      	ldr	r3, [pc, #68]	; (80001c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000180:	785b      	ldrb	r3, [r3, #1]
 8000182:	2b3b      	cmp	r3, #59	; 0x3b
 8000184:	d109      	bne.n	800019a <HAL_TIM_PeriodElapsedCallback+0x3e>
		  {
			  display_timer.min = 0;
 8000186:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000188:	2200      	movs	r2, #0
 800018a:	705a      	strb	r2, [r3, #1]
			  display_timer.hour++;
 800018c:	4b0d      	ldr	r3, [pc, #52]	; (80001c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	3301      	adds	r3, #1
 8000192:	b2da      	uxtb	r2, r3
 8000194:	4b0b      	ldr	r3, [pc, #44]	; (80001c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000196:	701a      	strb	r2, [r3, #0]
	  {
		  display_timer.sec++;
	  }

  }
}
 8000198:	e00c      	b.n	80001b4 <HAL_TIM_PeriodElapsedCallback+0x58>
		  display_timer.min++;
 800019a:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800019c:	785b      	ldrb	r3, [r3, #1]
 800019e:	3301      	adds	r3, #1
 80001a0:	b2da      	uxtb	r2, r3
 80001a2:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001a4:	705a      	strb	r2, [r3, #1]
}
 80001a6:	e005      	b.n	80001b4 <HAL_TIM_PeriodElapsedCallback+0x58>
		  display_timer.sec++;
 80001a8:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001aa:	789b      	ldrb	r3, [r3, #2]
 80001ac:	3301      	adds	r3, #1
 80001ae:	b2da      	uxtb	r2, r3
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001b2:	709a      	strb	r2, [r3, #2]
}
 80001b4:	bf00      	nop
 80001b6:	370c      	adds	r7, #12
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	200000dc 	.word	0x200000dc
 80001c4:	20000174 	.word	0x20000174

080001c8 <btn_press_short_callback>:


void btn_press_short_callback(Button_Typdef *ButtonX )
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if(ButtonX == &Button3)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a9e      	ldr	r2, [pc, #632]	; (800044c <btn_press_short_callback+0x284>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d12a      	bne.n	800022e <btn_press_short_callback+0x66>
	{
		if (Mode == idle_mode)
 80001d8:	4b9d      	ldr	r3, [pc, #628]	; (8000450 <btn_press_short_callback+0x288>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d109      	bne.n	80001f4 <btn_press_short_callback+0x2c>
		{
			Mode = adjust_mode;
 80001e0:	4b9b      	ldr	r3, [pc, #620]	; (8000450 <btn_press_short_callback+0x288>)
 80001e2:	2202      	movs	r2, #2
 80001e4:	701a      	strb	r2, [r3, #0]
			lcd_clear_display(&hlcd);
 80001e6:	489b      	ldr	r0, [pc, #620]	; (8000454 <btn_press_short_callback+0x28c>)
 80001e8:	f003 fe96 	bl	8003f18 <lcd_clear_display>
			HAL_Delay(1);
 80001ec:	2001      	movs	r0, #1
 80001ee:	f000 ff31 	bl	8001054 <HAL_Delay>
 80001f2:	e01c      	b.n	800022e <btn_press_short_callback+0x66>
		}
		else if (Mode == alarm_mode)
 80001f4:	4b96      	ldr	r3, [pc, #600]	; (8000450 <btn_press_short_callback+0x288>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d10c      	bne.n	8000216 <btn_press_short_callback+0x4e>
		{
			state_alarm = alarm_setted;
 80001fc:	4b96      	ldr	r3, [pc, #600]	; (8000458 <btn_press_short_callback+0x290>)
 80001fe:	2201      	movs	r2, #1
 8000200:	701a      	strb	r2, [r3, #0]
			Mode = idle_mode;
 8000202:	4b93      	ldr	r3, [pc, #588]	; (8000450 <btn_press_short_callback+0x288>)
 8000204:	2201      	movs	r2, #1
 8000206:	701a      	strb	r2, [r3, #0]
			lcd_clear_display(&hlcd);
 8000208:	4892      	ldr	r0, [pc, #584]	; (8000454 <btn_press_short_callback+0x28c>)
 800020a:	f003 fe85 	bl	8003f18 <lcd_clear_display>
			HAL_Delay(1);
 800020e:	2001      	movs	r0, #1
 8000210:	f000 ff20 	bl	8001054 <HAL_Delay>
 8000214:	e00b      	b.n	800022e <btn_press_short_callback+0x66>
		}
		else
		{
			adjust_state = no_adjust;
 8000216:	4b91      	ldr	r3, [pc, #580]	; (800045c <btn_press_short_callback+0x294>)
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]
			Mode = idle_mode;
 800021c:	4b8c      	ldr	r3, [pc, #560]	; (8000450 <btn_press_short_callback+0x288>)
 800021e:	2201      	movs	r2, #1
 8000220:	701a      	strb	r2, [r3, #0]
			lcd_clear_display(&hlcd);
 8000222:	488c      	ldr	r0, [pc, #560]	; (8000454 <btn_press_short_callback+0x28c>)
 8000224:	f003 fe78 	bl	8003f18 <lcd_clear_display>
			HAL_Delay(1);
 8000228:	2001      	movs	r0, #1
 800022a:	f000 ff13 	bl	8001054 <HAL_Delay>
		}
	}
	if(ButtonX == &Button4)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4a8b      	ldr	r2, [pc, #556]	; (8000460 <btn_press_short_callback+0x298>)
 8000232:	4293      	cmp	r3, r2
 8000234:	f040 8085 	bne.w	8000342 <btn_press_short_callback+0x17a>
	{
		if (Mode == adjust_mode)
 8000238:	4b85      	ldr	r3, [pc, #532]	; (8000450 <btn_press_short_callback+0x288>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b02      	cmp	r3, #2
 800023e:	d131      	bne.n	80002a4 <btn_press_short_callback+0xdc>
		{
			switch(adjust_state)
 8000240:	4b86      	ldr	r3, [pc, #536]	; (800045c <btn_press_short_callback+0x294>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b06      	cmp	r3, #6
 8000246:	d87c      	bhi.n	8000342 <btn_press_short_callback+0x17a>
 8000248:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <btn_press_short_callback+0x88>)
 800024a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024e:	bf00      	nop
 8000250:	0800026d 	.word	0x0800026d
 8000254:	08000275 	.word	0x08000275
 8000258:	0800027d 	.word	0x0800027d
 800025c:	08000285 	.word	0x08000285
 8000260:	0800028d 	.word	0x0800028d
 8000264:	08000295 	.word	0x08000295
 8000268:	0800029d 	.word	0x0800029d
			{
			case no_adjust:
				adjust_state = second_adjust;
 800026c:	4b7b      	ldr	r3, [pc, #492]	; (800045c <btn_press_short_callback+0x294>)
 800026e:	2201      	movs	r2, #1
 8000270:	701a      	strb	r2, [r3, #0]
				break;
 8000272:	e066      	b.n	8000342 <btn_press_short_callback+0x17a>
			case second_adjust:
				adjust_state = minute_adjust;
 8000274:	4b79      	ldr	r3, [pc, #484]	; (800045c <btn_press_short_callback+0x294>)
 8000276:	2202      	movs	r2, #2
 8000278:	701a      	strb	r2, [r3, #0]
				break;
 800027a:	e062      	b.n	8000342 <btn_press_short_callback+0x17a>
			case minute_adjust:
				adjust_state = hour_adjust;
 800027c:	4b77      	ldr	r3, [pc, #476]	; (800045c <btn_press_short_callback+0x294>)
 800027e:	2203      	movs	r2, #3
 8000280:	701a      	strb	r2, [r3, #0]
				break;
 8000282:	e05e      	b.n	8000342 <btn_press_short_callback+0x17a>
			case hour_adjust:
				adjust_state = day_adjust;
 8000284:	4b75      	ldr	r3, [pc, #468]	; (800045c <btn_press_short_callback+0x294>)
 8000286:	2204      	movs	r2, #4
 8000288:	701a      	strb	r2, [r3, #0]
				break;
 800028a:	e05a      	b.n	8000342 <btn_press_short_callback+0x17a>
			case day_adjust:
				adjust_state = month_adjust;
 800028c:	4b73      	ldr	r3, [pc, #460]	; (800045c <btn_press_short_callback+0x294>)
 800028e:	2205      	movs	r2, #5
 8000290:	701a      	strb	r2, [r3, #0]
				break;
 8000292:	e056      	b.n	8000342 <btn_press_short_callback+0x17a>
			case month_adjust:
				adjust_state = year_adjust;
 8000294:	4b71      	ldr	r3, [pc, #452]	; (800045c <btn_press_short_callback+0x294>)
 8000296:	2206      	movs	r2, #6
 8000298:	701a      	strb	r2, [r3, #0]
				break;
 800029a:	e052      	b.n	8000342 <btn_press_short_callback+0x17a>
			case year_adjust:
				adjust_state = no_adjust;
 800029c:	4b6f      	ldr	r3, [pc, #444]	; (800045c <btn_press_short_callback+0x294>)
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
				break;
 80002a2:	e04e      	b.n	8000342 <btn_press_short_callback+0x17a>
			}
		}
		else if (Mode == alarm_mode)
 80002a4:	4b6a      	ldr	r3, [pc, #424]	; (8000450 <btn_press_short_callback+0x288>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d116      	bne.n	80002da <btn_press_short_callback+0x112>
		{
			switch(adjust_state)
 80002ac:	4b6b      	ldr	r3, [pc, #428]	; (800045c <btn_press_short_callback+0x294>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b03      	cmp	r3, #3
 80002b2:	d00e      	beq.n	80002d2 <btn_press_short_callback+0x10a>
 80002b4:	2b03      	cmp	r3, #3
 80002b6:	dc43      	bgt.n	8000340 <btn_press_short_callback+0x178>
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d002      	beq.n	80002c2 <btn_press_short_callback+0xfa>
 80002bc:	2b02      	cmp	r3, #2
 80002be:	d004      	beq.n	80002ca <btn_press_short_callback+0x102>
				break;
			case hour_adjust:
				adjust_state = no_adjust;
				break;
			default:
				break;
 80002c0:	e03e      	b.n	8000340 <btn_press_short_callback+0x178>
				adjust_state = minute_adjust;
 80002c2:	4b66      	ldr	r3, [pc, #408]	; (800045c <btn_press_short_callback+0x294>)
 80002c4:	2202      	movs	r2, #2
 80002c6:	701a      	strb	r2, [r3, #0]
				break;
 80002c8:	e03b      	b.n	8000342 <btn_press_short_callback+0x17a>
				adjust_state = hour_adjust;
 80002ca:	4b64      	ldr	r3, [pc, #400]	; (800045c <btn_press_short_callback+0x294>)
 80002cc:	2203      	movs	r2, #3
 80002ce:	701a      	strb	r2, [r3, #0]
				break;
 80002d0:	e037      	b.n	8000342 <btn_press_short_callback+0x17a>
				adjust_state = no_adjust;
 80002d2:	4b62      	ldr	r3, [pc, #392]	; (800045c <btn_press_short_callback+0x294>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
				break;
 80002d8:	e033      	b.n	8000342 <btn_press_short_callback+0x17a>
			}
		}
		else if (Mode == timer_mode)
 80002da:	4b5d      	ldr	r3, [pc, #372]	; (8000450 <btn_press_short_callback+0x288>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d114      	bne.n	800030c <btn_press_short_callback+0x144>
		{
			// start/stop  timer
			if(timer_state == false)
 80002e2:	4b60      	ldr	r3, [pc, #384]	; (8000464 <btn_press_short_callback+0x29c>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	f083 0301 	eor.w	r3, r3, #1
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d006      	beq.n	80002fe <btn_press_short_callback+0x136>
			{
				HAL_TIM_Base_Start_IT(&htim2);
 80002f0:	485d      	ldr	r0, [pc, #372]	; (8000468 <btn_press_short_callback+0x2a0>)
 80002f2:	f002 fe37 	bl	8002f64 <HAL_TIM_Base_Start_IT>
				timer_state = true;
 80002f6:	4b5b      	ldr	r3, [pc, #364]	; (8000464 <btn_press_short_callback+0x29c>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	701a      	strb	r2, [r3, #0]
 80002fc:	e021      	b.n	8000342 <btn_press_short_callback+0x17a>
			}
			else
			{
				HAL_TIM_Base_Stop_IT(&htim2);
 80002fe:	485a      	ldr	r0, [pc, #360]	; (8000468 <btn_press_short_callback+0x2a0>)
 8000300:	f002 fe82 	bl	8003008 <HAL_TIM_Base_Stop_IT>
				timer_state = false;
 8000304:	4b57      	ldr	r3, [pc, #348]	; (8000464 <btn_press_short_callback+0x29c>)
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
 800030a:	e01a      	b.n	8000342 <btn_press_short_callback+0x17a>
			}

		}
		else if (Mode == select_ringtone)
 800030c:	4b50      	ldr	r3, [pc, #320]	; (8000450 <btn_press_short_callback+0x288>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b04      	cmp	r3, #4
 8000312:	d116      	bne.n	8000342 <btn_press_short_callback+0x17a>
		{
			if(demo_track <9)
 8000314:	4b55      	ldr	r3, [pc, #340]	; (800046c <btn_press_short_callback+0x2a4>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b08      	cmp	r3, #8
 800031a:	d806      	bhi.n	800032a <btn_press_short_callback+0x162>
			{
				demo_track++;
 800031c:	4b53      	ldr	r3, [pc, #332]	; (800046c <btn_press_short_callback+0x2a4>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	3301      	adds	r3, #1
 8000322:	b2da      	uxtb	r2, r3
 8000324:	4b51      	ldr	r3, [pc, #324]	; (800046c <btn_press_short_callback+0x2a4>)
 8000326:	701a      	strb	r2, [r3, #0]
 8000328:	e002      	b.n	8000330 <btn_press_short_callback+0x168>
			}
			else
			{
				demo_track = 1;
 800032a:	4b50      	ldr	r3, [pc, #320]	; (800046c <btn_press_short_callback+0x2a4>)
 800032c:	2201      	movs	r2, #1
 800032e:	701a      	strb	r2, [r3, #0]
			}
			DFPLAYER_PlayTrack(&mini_player, demo_track);
 8000330:	4b4e      	ldr	r3, [pc, #312]	; (800046c <btn_press_short_callback+0x2a4>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	b29b      	uxth	r3, r3
 8000336:	4619      	mov	r1, r3
 8000338:	484d      	ldr	r0, [pc, #308]	; (8000470 <btn_press_short_callback+0x2a8>)
 800033a:	f003 fd33 	bl	8003da4 <DFPLAYER_PlayTrack>
 800033e:	e000      	b.n	8000342 <btn_press_short_callback+0x17a>
				break;
 8000340:	bf00      	nop
		}
	}
	if(ButtonX == &Button5)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a4b      	ldr	r2, [pc, #300]	; (8000474 <btn_press_short_callback+0x2ac>)
 8000346:	4293      	cmp	r3, r2
 8000348:	f040 8167 	bne.w	800061a <btn_press_short_callback+0x452>
	{
		if(state_alarm == alarm_setted && alarm_flag == alarm_is_ringing)
 800034c:	4b42      	ldr	r3, [pc, #264]	; (8000458 <btn_press_short_callback+0x290>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d10d      	bne.n	8000370 <btn_press_short_callback+0x1a8>
 8000354:	4b48      	ldr	r3, [pc, #288]	; (8000478 <btn_press_short_callback+0x2b0>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d109      	bne.n	8000370 <btn_press_short_callback+0x1a8>
		{
			state_alarm = alarm_not_set;
 800035c:	4b3e      	ldr	r3, [pc, #248]	; (8000458 <btn_press_short_callback+0x290>)
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]
			alarm_flag = alarm_is_not_ring;
 8000362:	4b45      	ldr	r3, [pc, #276]	; (8000478 <btn_press_short_callback+0x2b0>)
 8000364:	2201      	movs	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]
			DFPLAYER_Stop(&mini_player);
 8000368:	4841      	ldr	r0, [pc, #260]	; (8000470 <btn_press_short_callback+0x2a8>)
 800036a:	f003 fd4b 	bl	8003e04 <DFPLAYER_Stop>
				lcd_clear_display(&hlcd);
				HAL_Delay(1);
			}
		}
	}
}
 800036e:	e154      	b.n	800061a <btn_press_short_callback+0x452>
			if(Mode == idle_mode)
 8000370:	4b37      	ldr	r3, [pc, #220]	; (8000450 <btn_press_short_callback+0x288>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d114      	bne.n	80003a2 <btn_press_short_callback+0x1da>
				if(lcd_backlight == backlight_on)
 8000378:	4b40      	ldr	r3, [pc, #256]	; (800047c <btn_press_short_callback+0x2b4>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d106      	bne.n	800038e <btn_press_short_callback+0x1c6>
					lcd_backlight_off(&hlcd);
 8000380:	4834      	ldr	r0, [pc, #208]	; (8000454 <btn_press_short_callback+0x28c>)
 8000382:	f003 fdf0 	bl	8003f66 <lcd_backlight_off>
					lcd_backlight = backlight_off;
 8000386:	4b3d      	ldr	r3, [pc, #244]	; (800047c <btn_press_short_callback+0x2b4>)
 8000388:	2201      	movs	r2, #1
 800038a:	701a      	strb	r2, [r3, #0]
 800038c:	e009      	b.n	80003a2 <btn_press_short_callback+0x1da>
				else if(lcd_backlight == backlight_off)
 800038e:	4b3b      	ldr	r3, [pc, #236]	; (800047c <btn_press_short_callback+0x2b4>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d105      	bne.n	80003a2 <btn_press_short_callback+0x1da>
					lcd_backlight_on(&hlcd);
 8000396:	482f      	ldr	r0, [pc, #188]	; (8000454 <btn_press_short_callback+0x28c>)
 8000398:	f003 fdcd 	bl	8003f36 <lcd_backlight_on>
					lcd_backlight = backlight_on;
 800039c:	4b37      	ldr	r3, [pc, #220]	; (800047c <btn_press_short_callback+0x2b4>)
 800039e:	2200      	movs	r2, #0
 80003a0:	701a      	strb	r2, [r3, #0]
			if (Mode == alarm_mode)
 80003a2:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <btn_press_short_callback+0x288>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d124      	bne.n	80003f4 <btn_press_short_callback+0x22c>
				switch (adjust_state) {
 80003aa:	4b2c      	ldr	r3, [pc, #176]	; (800045c <btn_press_short_callback+0x294>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	d002      	beq.n	80003b8 <btn_press_short_callback+0x1f0>
 80003b2:	2b03      	cmp	r3, #3
 80003b4:	d00f      	beq.n	80003d6 <btn_press_short_callback+0x20e>
						break;
 80003b6:	e01d      	b.n	80003f4 <btn_press_short_callback+0x22c>
						if(Time_to_alarm.minute == 59)
 80003b8:	4b31      	ldr	r3, [pc, #196]	; (8000480 <btn_press_short_callback+0x2b8>)
 80003ba:	785b      	ldrb	r3, [r3, #1]
 80003bc:	2b3b      	cmp	r3, #59	; 0x3b
 80003be:	d103      	bne.n	80003c8 <btn_press_short_callback+0x200>
							Time_to_alarm.minute = 0;
 80003c0:	4b2f      	ldr	r3, [pc, #188]	; (8000480 <btn_press_short_callback+0x2b8>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	705a      	strb	r2, [r3, #1]
						break;
 80003c6:	e015      	b.n	80003f4 <btn_press_short_callback+0x22c>
							Time_to_alarm.minute++;
 80003c8:	4b2d      	ldr	r3, [pc, #180]	; (8000480 <btn_press_short_callback+0x2b8>)
 80003ca:	785b      	ldrb	r3, [r3, #1]
 80003cc:	3301      	adds	r3, #1
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b2b      	ldr	r3, [pc, #172]	; (8000480 <btn_press_short_callback+0x2b8>)
 80003d2:	705a      	strb	r2, [r3, #1]
						break;
 80003d4:	e00e      	b.n	80003f4 <btn_press_short_callback+0x22c>
						if(Time_to_alarm.hour == 23)
 80003d6:	4b2a      	ldr	r3, [pc, #168]	; (8000480 <btn_press_short_callback+0x2b8>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b17      	cmp	r3, #23
 80003dc:	d103      	bne.n	80003e6 <btn_press_short_callback+0x21e>
							Time_to_alarm.hour = 0;
 80003de:	4b28      	ldr	r3, [pc, #160]	; (8000480 <btn_press_short_callback+0x2b8>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
						break;
 80003e4:	e005      	b.n	80003f2 <btn_press_short_callback+0x22a>
							Time_to_alarm.hour++;
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <btn_press_short_callback+0x2b8>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	3301      	adds	r3, #1
 80003ec:	b2da      	uxtb	r2, r3
 80003ee:	4b24      	ldr	r3, [pc, #144]	; (8000480 <btn_press_short_callback+0x2b8>)
 80003f0:	701a      	strb	r2, [r3, #0]
						break;
 80003f2:	bf00      	nop
			if(Mode == adjust_mode)
 80003f4:	4b16      	ldr	r3, [pc, #88]	; (8000450 <btn_press_short_callback+0x288>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	f040 80e3 	bne.w	80005c4 <btn_press_short_callback+0x3fc>
				switch(adjust_state)
 80003fe:	4b17      	ldr	r3, [pc, #92]	; (800045c <btn_press_short_callback+0x294>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b06      	cmp	r3, #6
 8000404:	f200 80de 	bhi.w	80005c4 <btn_press_short_callback+0x3fc>
 8000408:	a201      	add	r2, pc, #4	; (adr r2, 8000410 <btn_press_short_callback+0x248>)
 800040a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040e:	bf00      	nop
 8000410:	080005c5 	.word	0x080005c5
 8000414:	0800042d 	.word	0x0800042d
 8000418:	080004a3 	.word	0x080004a3
 800041c:	080004dd 	.word	0x080004dd
 8000420:	08000517 	.word	0x08000517
 8000424:	08000551 	.word	0x08000551
 8000428:	0800058b 	.word	0x0800058b
					RTC_ReadTime(&ds3231, ds3231.time);
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <btn_press_short_callback+0x2bc>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	4619      	mov	r1, r3
 8000432:	4814      	ldr	r0, [pc, #80]	; (8000484 <btn_press_short_callback+0x2bc>)
 8000434:	f003 fea2 	bl	800417c <RTC_ReadTime>
					if(ds3231.time->sec == 59)
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <btn_press_short_callback+0x2bc>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b3b      	cmp	r3, #59	; 0x3b
 8000440:	d122      	bne.n	8000488 <btn_press_short_callback+0x2c0>
						ds3231.time->sec = 0;
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <btn_press_short_callback+0x2bc>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
 800044a:	e023      	b.n	8000494 <btn_press_short_callback+0x2cc>
 800044c:	200001a0 	.word	0x200001a0
 8000450:	20000000 	.word	0x20000000
 8000454:	2000017c 	.word	0x2000017c
 8000458:	20000172 	.word	0x20000172
 800045c:	2000016d 	.word	0x2000016d
 8000460:	200001b8 	.word	0x200001b8
 8000464:	2000017a 	.word	0x2000017a
 8000468:	200000dc 	.word	0x200000dc
 800046c:	20000002 	.word	0x20000002
 8000470:	20000190 	.word	0x20000190
 8000474:	200001d0 	.word	0x200001d0
 8000478:	20000001 	.word	0x20000001
 800047c:	2000016c 	.word	0x2000016c
 8000480:	20000170 	.word	0x20000170
 8000484:	20000188 	.word	0x20000188
						ds3231.time->sec++;
 8000488:	4b66      	ldr	r3, [pc, #408]	; (8000624 <btn_press_short_callback+0x45c>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	781a      	ldrb	r2, [r3, #0]
 800048e:	3201      	adds	r2, #1
 8000490:	b2d2      	uxtb	r2, r2
 8000492:	701a      	strb	r2, [r3, #0]
					RTC_WriteTime(&ds3231, ds3231.time);
 8000494:	4b63      	ldr	r3, [pc, #396]	; (8000624 <btn_press_short_callback+0x45c>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	4619      	mov	r1, r3
 800049a:	4862      	ldr	r0, [pc, #392]	; (8000624 <btn_press_short_callback+0x45c>)
 800049c:	f003 fec7 	bl	800422e <RTC_WriteTime>
					break;
 80004a0:	e090      	b.n	80005c4 <btn_press_short_callback+0x3fc>
					RTC_ReadTime(&ds3231, ds3231.time);
 80004a2:	4b60      	ldr	r3, [pc, #384]	; (8000624 <btn_press_short_callback+0x45c>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	4619      	mov	r1, r3
 80004a8:	485e      	ldr	r0, [pc, #376]	; (8000624 <btn_press_short_callback+0x45c>)
 80004aa:	f003 fe67 	bl	800417c <RTC_ReadTime>
					if(ds3231.time->min == 59)
 80004ae:	4b5d      	ldr	r3, [pc, #372]	; (8000624 <btn_press_short_callback+0x45c>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	785b      	ldrb	r3, [r3, #1]
 80004b4:	2b3b      	cmp	r3, #59	; 0x3b
 80004b6:	d104      	bne.n	80004c2 <btn_press_short_callback+0x2fa>
						ds3231.time->min = 0;
 80004b8:	4b5a      	ldr	r3, [pc, #360]	; (8000624 <btn_press_short_callback+0x45c>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	2200      	movs	r2, #0
 80004be:	705a      	strb	r2, [r3, #1]
 80004c0:	e005      	b.n	80004ce <btn_press_short_callback+0x306>
						ds3231.time->min++;
 80004c2:	4b58      	ldr	r3, [pc, #352]	; (8000624 <btn_press_short_callback+0x45c>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	785a      	ldrb	r2, [r3, #1]
 80004c8:	3201      	adds	r2, #1
 80004ca:	b2d2      	uxtb	r2, r2
 80004cc:	705a      	strb	r2, [r3, #1]
					RTC_WriteTime(&ds3231, ds3231.time);
 80004ce:	4b55      	ldr	r3, [pc, #340]	; (8000624 <btn_press_short_callback+0x45c>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	4619      	mov	r1, r3
 80004d4:	4853      	ldr	r0, [pc, #332]	; (8000624 <btn_press_short_callback+0x45c>)
 80004d6:	f003 feaa 	bl	800422e <RTC_WriteTime>
					break;
 80004da:	e073      	b.n	80005c4 <btn_press_short_callback+0x3fc>
					RTC_ReadTime(&ds3231, ds3231.time);
 80004dc:	4b51      	ldr	r3, [pc, #324]	; (8000624 <btn_press_short_callback+0x45c>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	4619      	mov	r1, r3
 80004e2:	4850      	ldr	r0, [pc, #320]	; (8000624 <btn_press_short_callback+0x45c>)
 80004e4:	f003 fe4a 	bl	800417c <RTC_ReadTime>
					if(ds3231.time->hour == 23)
 80004e8:	4b4e      	ldr	r3, [pc, #312]	; (8000624 <btn_press_short_callback+0x45c>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	789b      	ldrb	r3, [r3, #2]
 80004ee:	2b17      	cmp	r3, #23
 80004f0:	d104      	bne.n	80004fc <btn_press_short_callback+0x334>
						ds3231.time->hour = 0;
 80004f2:	4b4c      	ldr	r3, [pc, #304]	; (8000624 <btn_press_short_callback+0x45c>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	709a      	strb	r2, [r3, #2]
 80004fa:	e005      	b.n	8000508 <btn_press_short_callback+0x340>
						ds3231.time->hour++;
 80004fc:	4b49      	ldr	r3, [pc, #292]	; (8000624 <btn_press_short_callback+0x45c>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	789a      	ldrb	r2, [r3, #2]
 8000502:	3201      	adds	r2, #1
 8000504:	b2d2      	uxtb	r2, r2
 8000506:	709a      	strb	r2, [r3, #2]
					RTC_WriteTime(&ds3231, ds3231.time);
 8000508:	4b46      	ldr	r3, [pc, #280]	; (8000624 <btn_press_short_callback+0x45c>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	4619      	mov	r1, r3
 800050e:	4845      	ldr	r0, [pc, #276]	; (8000624 <btn_press_short_callback+0x45c>)
 8000510:	f003 fe8d 	bl	800422e <RTC_WriteTime>
					break;
 8000514:	e056      	b.n	80005c4 <btn_press_short_callback+0x3fc>
					RTC_ReadTime(&ds3231, ds3231.time);
 8000516:	4b43      	ldr	r3, [pc, #268]	; (8000624 <btn_press_short_callback+0x45c>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	4619      	mov	r1, r3
 800051c:	4841      	ldr	r0, [pc, #260]	; (8000624 <btn_press_short_callback+0x45c>)
 800051e:	f003 fe2d 	bl	800417c <RTC_ReadTime>
					if(ds3231.time->date == 31)
 8000522:	4b40      	ldr	r3, [pc, #256]	; (8000624 <btn_press_short_callback+0x45c>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	78db      	ldrb	r3, [r3, #3]
 8000528:	2b1f      	cmp	r3, #31
 800052a:	d104      	bne.n	8000536 <btn_press_short_callback+0x36e>
						ds3231.time->date = 1;
 800052c:	4b3d      	ldr	r3, [pc, #244]	; (8000624 <btn_press_short_callback+0x45c>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	2201      	movs	r2, #1
 8000532:	70da      	strb	r2, [r3, #3]
 8000534:	e005      	b.n	8000542 <btn_press_short_callback+0x37a>
						ds3231.time->date++;
 8000536:	4b3b      	ldr	r3, [pc, #236]	; (8000624 <btn_press_short_callback+0x45c>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	78da      	ldrb	r2, [r3, #3]
 800053c:	3201      	adds	r2, #1
 800053e:	b2d2      	uxtb	r2, r2
 8000540:	70da      	strb	r2, [r3, #3]
					RTC_WriteTime(&ds3231, ds3231.time);
 8000542:	4b38      	ldr	r3, [pc, #224]	; (8000624 <btn_press_short_callback+0x45c>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	4619      	mov	r1, r3
 8000548:	4836      	ldr	r0, [pc, #216]	; (8000624 <btn_press_short_callback+0x45c>)
 800054a:	f003 fe70 	bl	800422e <RTC_WriteTime>
					break;
 800054e:	e039      	b.n	80005c4 <btn_press_short_callback+0x3fc>
					RTC_ReadTime(&ds3231, ds3231.time);
 8000550:	4b34      	ldr	r3, [pc, #208]	; (8000624 <btn_press_short_callback+0x45c>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	4619      	mov	r1, r3
 8000556:	4833      	ldr	r0, [pc, #204]	; (8000624 <btn_press_short_callback+0x45c>)
 8000558:	f003 fe10 	bl	800417c <RTC_ReadTime>
					if(ds3231.time->month == 12)
 800055c:	4b31      	ldr	r3, [pc, #196]	; (8000624 <btn_press_short_callback+0x45c>)
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	795b      	ldrb	r3, [r3, #5]
 8000562:	2b0c      	cmp	r3, #12
 8000564:	d104      	bne.n	8000570 <btn_press_short_callback+0x3a8>
						ds3231.time->month = 1;
 8000566:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <btn_press_short_callback+0x45c>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	2201      	movs	r2, #1
 800056c:	715a      	strb	r2, [r3, #5]
 800056e:	e005      	b.n	800057c <btn_press_short_callback+0x3b4>
						ds3231.time->month++;
 8000570:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <btn_press_short_callback+0x45c>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	795a      	ldrb	r2, [r3, #5]
 8000576:	3201      	adds	r2, #1
 8000578:	b2d2      	uxtb	r2, r2
 800057a:	715a      	strb	r2, [r3, #5]
					RTC_WriteTime(&ds3231, ds3231.time);
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <btn_press_short_callback+0x45c>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	4619      	mov	r1, r3
 8000582:	4828      	ldr	r0, [pc, #160]	; (8000624 <btn_press_short_callback+0x45c>)
 8000584:	f003 fe53 	bl	800422e <RTC_WriteTime>
					break;
 8000588:	e01c      	b.n	80005c4 <btn_press_short_callback+0x3fc>
					RTC_ReadTime(&ds3231, ds3231.time);
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <btn_press_short_callback+0x45c>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	4619      	mov	r1, r3
 8000590:	4824      	ldr	r0, [pc, #144]	; (8000624 <btn_press_short_callback+0x45c>)
 8000592:	f003 fdf3 	bl	800417c <RTC_ReadTime>
					if(ds3231.time->year == 99)
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <btn_press_short_callback+0x45c>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	799b      	ldrb	r3, [r3, #6]
 800059c:	2b63      	cmp	r3, #99	; 0x63
 800059e:	d104      	bne.n	80005aa <btn_press_short_callback+0x3e2>
						ds3231.time->year = 1;
 80005a0:	4b20      	ldr	r3, [pc, #128]	; (8000624 <btn_press_short_callback+0x45c>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	2201      	movs	r2, #1
 80005a6:	719a      	strb	r2, [r3, #6]
 80005a8:	e005      	b.n	80005b6 <btn_press_short_callback+0x3ee>
						ds3231.time->year++;
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <btn_press_short_callback+0x45c>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	799a      	ldrb	r2, [r3, #6]
 80005b0:	3201      	adds	r2, #1
 80005b2:	b2d2      	uxtb	r2, r2
 80005b4:	719a      	strb	r2, [r3, #6]
					RTC_WriteTime(&ds3231, ds3231.time);
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <btn_press_short_callback+0x45c>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4819      	ldr	r0, [pc, #100]	; (8000624 <btn_press_short_callback+0x45c>)
 80005be:	f003 fe36 	bl	800422e <RTC_WriteTime>
					break;
 80005c2:	bf00      	nop
			if(Mode == timer_mode)
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <btn_press_short_callback+0x460>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b03      	cmp	r3, #3
 80005ca:	d112      	bne.n	80005f2 <btn_press_short_callback+0x42a>
				HAL_TIM_Base_Stop(&htim2);
 80005cc:	4817      	ldr	r0, [pc, #92]	; (800062c <btn_press_short_callback+0x464>)
 80005ce:	f002 fca2 	bl	8002f16 <HAL_TIM_Base_Stop>
				display_timer.hour = 0;
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <btn_press_short_callback+0x468>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
				display_timer.min = 0;
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <btn_press_short_callback+0x468>)
 80005da:	2200      	movs	r2, #0
 80005dc:	705a      	strb	r2, [r3, #1]
				display_timer.sec = 0;
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <btn_press_short_callback+0x468>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	709a      	strb	r2, [r3, #2]
				htim2.Instance->CNT = 0;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <btn_press_short_callback+0x464>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2200      	movs	r2, #0
 80005ea:	625a      	str	r2, [r3, #36]	; 0x24
				timer_state = false;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <btn_press_short_callback+0x46c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
			if(Mode == select_ringtone)
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <btn_press_short_callback+0x460>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	d10f      	bne.n	800061a <btn_press_short_callback+0x452>
				track_num = demo_track;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <btn_press_short_callback+0x470>)
 80005fc:	781a      	ldrb	r2, [r3, #0]
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <btn_press_short_callback+0x474>)
 8000600:	701a      	strb	r2, [r3, #0]
				DFPLAYER_Stop(&mini_player);
 8000602:	480f      	ldr	r0, [pc, #60]	; (8000640 <btn_press_short_callback+0x478>)
 8000604:	f003 fbfe 	bl	8003e04 <DFPLAYER_Stop>
				Mode = idle_mode;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <btn_press_short_callback+0x460>)
 800060a:	2201      	movs	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
				lcd_clear_display(&hlcd);
 800060e:	480d      	ldr	r0, [pc, #52]	; (8000644 <btn_press_short_callback+0x47c>)
 8000610:	f003 fc82 	bl	8003f18 <lcd_clear_display>
				HAL_Delay(1);
 8000614:	2001      	movs	r0, #1
 8000616:	f000 fd1d 	bl	8001054 <HAL_Delay>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000188 	.word	0x20000188
 8000628:	20000000 	.word	0x20000000
 800062c:	200000dc 	.word	0x200000dc
 8000630:	20000174 	.word	0x20000174
 8000634:	2000017a 	.word	0x2000017a
 8000638:	20000002 	.word	0x20000002
 800063c:	20000003 	.word	0x20000003
 8000640:	20000190 	.word	0x20000190
 8000644:	2000017c 	.word	0x2000017c

08000648 <btn_press_timeout1s_callback>:

void btn_press_timeout1s_callback(Button_Typdef *ButtonX)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	if(ButtonX == &Button3)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <btn_press_timeout1s_callback+0x2c>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d108      	bne.n	800066a <btn_press_timeout1s_callback+0x22>
	{
		Mode = select_ringtone;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <btn_press_timeout1s_callback+0x30>)
 800065a:	2204      	movs	r2, #4
 800065c:	701a      	strb	r2, [r3, #0]
		lcd_clear_display(&hlcd);
 800065e:	4807      	ldr	r0, [pc, #28]	; (800067c <btn_press_timeout1s_callback+0x34>)
 8000660:	f003 fc5a 	bl	8003f18 <lcd_clear_display>
		HAL_Delay(1);
 8000664:	2001      	movs	r0, #1
 8000666:	f000 fcf5 	bl	8001054 <HAL_Delay>
	}
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200001a0 	.word	0x200001a0
 8000678:	20000000 	.word	0x20000000
 800067c:	2000017c 	.word	0x2000017c

08000680 <btn_press_timeout2s_callback>:

void btn_press_timeout2s_callback(Button_Typdef *ButtonX)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	if(ButtonX == &Button3)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <btn_press_timeout2s_callback+0x30>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d10b      	bne.n	80006a8 <btn_press_timeout2s_callback+0x28>
	{
		adjust_state = no_adjust;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <btn_press_timeout2s_callback+0x34>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
		Mode = alarm_mode;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <btn_press_timeout2s_callback+0x38>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
		lcd_clear_display(&hlcd);
 800069c:	4807      	ldr	r0, [pc, #28]	; (80006bc <btn_press_timeout2s_callback+0x3c>)
 800069e:	f003 fc3b 	bl	8003f18 <lcd_clear_display>
		HAL_Delay(1);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f000 fcd6 	bl	8001054 <HAL_Delay>
//		if(Mode == alarm_mode)
//		{
//			state_alarm = alarm_setted;
//		}
	}
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200001a0 	.word	0x200001a0
 80006b4:	2000016d 	.word	0x2000016d
 80006b8:	20000000 	.word	0x20000000
 80006bc:	2000017c 	.word	0x2000017c

080006c0 <btn_press_timeout3s_callback>:

void btn_press_timeout3s_callback(Button_Typdef *ButtonX)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	if(ButtonX == &Button3)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <btn_press_timeout3s_callback+0x30>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d10b      	bne.n	80006e8 <btn_press_timeout3s_callback+0x28>
	{
		adjust_state = no_adjust;
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <btn_press_timeout3s_callback+0x34>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
		Mode = timer_mode;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <btn_press_timeout3s_callback+0x38>)
 80006d8:	2203      	movs	r2, #3
 80006da:	701a      	strb	r2, [r3, #0]
		lcd_clear_display(&hlcd);
 80006dc:	4807      	ldr	r0, [pc, #28]	; (80006fc <btn_press_timeout3s_callback+0x3c>)
 80006de:	f003 fc1b 	bl	8003f18 <lcd_clear_display>
		HAL_Delay(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f000 fcb6 	bl	8001054 <HAL_Delay>
	}
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200001a0 	.word	0x200001a0
 80006f4:	2000016d 	.word	0x2000016d
 80006f8:	20000000 	.word	0x20000000
 80006fc:	2000017c 	.word	0x2000017c

08000700 <alarm_handle>:

void alarm_handle()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	  if(state_alarm == alarm_setted && alarm_flag == alarm_is_not_ring)
 8000704:	4b24      	ldr	r3, [pc, #144]	; (8000798 <alarm_handle+0x98>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d11b      	bne.n	8000744 <alarm_handle+0x44>
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <alarm_handle+0x9c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d117      	bne.n	8000744 <alarm_handle+0x44>
	  {
		  if(Time_to_alarm.hour == ds3231.time->hour && Time_to_alarm.minute == ds3231.time->min)
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <alarm_handle+0xa0>)
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <alarm_handle+0xa4>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	429a      	cmp	r2, r3
 8000720:	d110      	bne.n	8000744 <alarm_handle+0x44>
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <alarm_handle+0xa0>)
 8000724:	785a      	ldrb	r2, [r3, #1]
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <alarm_handle+0xa4>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	785b      	ldrb	r3, [r3, #1]
 800072c:	429a      	cmp	r2, r3
 800072e:	d109      	bne.n	8000744 <alarm_handle+0x44>
		  {
			  alarm_flag = alarm_is_ringing;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <alarm_handle+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
			  DFPLAYER_PlayTrack(&mini_player, track_num);
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <alarm_handle+0xa8>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b29b      	uxth	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	481b      	ldr	r0, [pc, #108]	; (80007ac <alarm_handle+0xac>)
 8000740:	f003 fb30 	bl	8003da4 <DFPLAYER_PlayTrack>
		  }
	  }
	  if(state_alarm == alarm_setted && alarm_flag == alarm_is_ringing)
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <alarm_handle+0x98>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d122      	bne.n	8000792 <alarm_handle+0x92>
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <alarm_handle+0x9c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d11e      	bne.n	8000792 <alarm_handle+0x92>
	  {

		  if(HAL_GetTick() - temp >= 1000){
 8000754:	f000 fc74 	bl	8001040 <HAL_GetTick>
 8000758:	4602      	mov	r2, r0
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <alarm_handle+0xb0>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000764:	d315      	bcc.n	8000792 <alarm_handle+0x92>
			  if(lcd_backlight ==  backlight_on){
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <alarm_handle+0xb4>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d106      	bne.n	800077c <alarm_handle+0x7c>
				  lcd_backlight_off(&hlcd);
 800076e:	4812      	ldr	r0, [pc, #72]	; (80007b8 <alarm_handle+0xb8>)
 8000770:	f003 fbf9 	bl	8003f66 <lcd_backlight_off>
				  lcd_backlight = backlight_off;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <alarm_handle+0xb4>)
 8000776:	2201      	movs	r2, #1
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	e005      	b.n	8000788 <alarm_handle+0x88>
			  }
			  else{
				  lcd_backlight_on(&hlcd);
 800077c:	480e      	ldr	r0, [pc, #56]	; (80007b8 <alarm_handle+0xb8>)
 800077e:	f003 fbda 	bl	8003f36 <lcd_backlight_on>
				  lcd_backlight = backlight_on;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <alarm_handle+0xb4>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
			  }
			  temp = HAL_GetTick();
 8000788:	f000 fc5a 	bl	8001040 <HAL_GetTick>
 800078c:	4603      	mov	r3, r0
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <alarm_handle+0xb0>)
 8000790:	6013      	str	r3, [r2, #0]
		  }
	  }
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000172 	.word	0x20000172
 800079c:	20000001 	.word	0x20000001
 80007a0:	20000170 	.word	0x20000170
 80007a4:	20000188 	.word	0x20000188
 80007a8:	20000003 	.word	0x20000003
 80007ac:	20000190 	.word	0x20000190
 80007b0:	200001e8 	.word	0x200001e8
 80007b4:	2000016c 	.word	0x2000016c
 80007b8:	2000017c 	.word	0x2000017c

080007bc <display_handle>:
void display_handle()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af02      	add	r7, sp, #8
	switch(Mode)
 80007c2:	4b66      	ldr	r3, [pc, #408]	; (800095c <display_handle+0x1a0>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	f200 80c5 	bhi.w	8000956 <display_handle+0x19a>
 80007cc:	a201      	add	r2, pc, #4	; (adr r2, 80007d4 <display_handle+0x18>)
 80007ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d2:	bf00      	nop
 80007d4:	080008fb 	.word	0x080008fb
 80007d8:	080007e9 	.word	0x080007e9
 80007dc:	0800084f 	.word	0x0800084f
 80007e0:	080008b5 	.word	0x080008b5
 80007e4:	0800092b 	.word	0x0800092b
	{
	case idle_mode:
		RTC_ReadTime(&ds3231,ds3231.time);
 80007e8:	4b5d      	ldr	r3, [pc, #372]	; (8000960 <display_handle+0x1a4>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	4619      	mov	r1, r3
 80007ee:	485c      	ldr	r0, [pc, #368]	; (8000960 <display_handle+0x1a4>)
 80007f0:	f003 fcc4 	bl	800417c <RTC_ReadTime>
		lcd_set_cursor(&hlcd, 1,4);
 80007f4:	2204      	movs	r2, #4
 80007f6:	2101      	movs	r1, #1
 80007f8:	485a      	ldr	r0, [pc, #360]	; (8000964 <display_handle+0x1a8>)
 80007fa:	f003 fbcd 	bl	8003f98 <lcd_set_cursor>
		lcd_printf(&hlcd, "%02d:%02d:%02d",ds3231.time->hour,
 80007fe:	4b58      	ldr	r3, [pc, #352]	; (8000960 <display_handle+0x1a4>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	789b      	ldrb	r3, [r3, #2]
 8000804:	461a      	mov	r2, r3
				ds3231.time->min, ds3231.time->sec);
 8000806:	4b56      	ldr	r3, [pc, #344]	; (8000960 <display_handle+0x1a4>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	785b      	ldrb	r3, [r3, #1]
		lcd_printf(&hlcd, "%02d:%02d:%02d",ds3231.time->hour,
 800080c:	4619      	mov	r1, r3
				ds3231.time->min, ds3231.time->sec);
 800080e:	4b54      	ldr	r3, [pc, #336]	; (8000960 <display_handle+0x1a4>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	781b      	ldrb	r3, [r3, #0]
		lcd_printf(&hlcd, "%02d:%02d:%02d",ds3231.time->hour,
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	460b      	mov	r3, r1
 8000818:	4953      	ldr	r1, [pc, #332]	; (8000968 <display_handle+0x1ac>)
 800081a:	4852      	ldr	r0, [pc, #328]	; (8000964 <display_handle+0x1a8>)
 800081c:	f003 fbf6 	bl	800400c <lcd_printf>
		lcd_set_cursor(&hlcd, 0,4);
 8000820:	2204      	movs	r2, #4
 8000822:	2100      	movs	r1, #0
 8000824:	484f      	ldr	r0, [pc, #316]	; (8000964 <display_handle+0x1a8>)
 8000826:	f003 fbb7 	bl	8003f98 <lcd_set_cursor>
		lcd_printf(&hlcd, "%02d-%02d-%02d",ds3231.time->date,
 800082a:	4b4d      	ldr	r3, [pc, #308]	; (8000960 <display_handle+0x1a4>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	78db      	ldrb	r3, [r3, #3]
 8000830:	461a      	mov	r2, r3
				ds3231.time->month,ds3231.time->year);
 8000832:	4b4b      	ldr	r3, [pc, #300]	; (8000960 <display_handle+0x1a4>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	795b      	ldrb	r3, [r3, #5]
		lcd_printf(&hlcd, "%02d-%02d-%02d",ds3231.time->date,
 8000838:	4619      	mov	r1, r3
				ds3231.time->month,ds3231.time->year);
 800083a:	4b49      	ldr	r3, [pc, #292]	; (8000960 <display_handle+0x1a4>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	799b      	ldrb	r3, [r3, #6]
		lcd_printf(&hlcd, "%02d-%02d-%02d",ds3231.time->date,
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	460b      	mov	r3, r1
 8000844:	4949      	ldr	r1, [pc, #292]	; (800096c <display_handle+0x1b0>)
 8000846:	4847      	ldr	r0, [pc, #284]	; (8000964 <display_handle+0x1a8>)
 8000848:	f003 fbe0 	bl	800400c <lcd_printf>
		break;
 800084c:	e083      	b.n	8000956 <display_handle+0x19a>
	case adjust_mode:
		RTC_ReadTime(&ds3231,ds3231.time);
 800084e:	4b44      	ldr	r3, [pc, #272]	; (8000960 <display_handle+0x1a4>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	4619      	mov	r1, r3
 8000854:	4842      	ldr	r0, [pc, #264]	; (8000960 <display_handle+0x1a4>)
 8000856:	f003 fc91 	bl	800417c <RTC_ReadTime>
		lcd_set_cursor(&hlcd, 1,4);
 800085a:	2204      	movs	r2, #4
 800085c:	2101      	movs	r1, #1
 800085e:	4841      	ldr	r0, [pc, #260]	; (8000964 <display_handle+0x1a8>)
 8000860:	f003 fb9a 	bl	8003f98 <lcd_set_cursor>
		lcd_printf(&hlcd, "%02d:%02d:%02d",ds3231.time->hour,
 8000864:	4b3e      	ldr	r3, [pc, #248]	; (8000960 <display_handle+0x1a4>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	789b      	ldrb	r3, [r3, #2]
 800086a:	461a      	mov	r2, r3
				ds3231.time->min, ds3231.time->sec);
 800086c:	4b3c      	ldr	r3, [pc, #240]	; (8000960 <display_handle+0x1a4>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	785b      	ldrb	r3, [r3, #1]
		lcd_printf(&hlcd, "%02d:%02d:%02d",ds3231.time->hour,
 8000872:	4619      	mov	r1, r3
				ds3231.time->min, ds3231.time->sec);
 8000874:	4b3a      	ldr	r3, [pc, #232]	; (8000960 <display_handle+0x1a4>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	781b      	ldrb	r3, [r3, #0]
		lcd_printf(&hlcd, "%02d:%02d:%02d",ds3231.time->hour,
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	460b      	mov	r3, r1
 800087e:	493a      	ldr	r1, [pc, #232]	; (8000968 <display_handle+0x1ac>)
 8000880:	4838      	ldr	r0, [pc, #224]	; (8000964 <display_handle+0x1a8>)
 8000882:	f003 fbc3 	bl	800400c <lcd_printf>
		lcd_set_cursor(&hlcd, 0,4);
 8000886:	2204      	movs	r2, #4
 8000888:	2100      	movs	r1, #0
 800088a:	4836      	ldr	r0, [pc, #216]	; (8000964 <display_handle+0x1a8>)
 800088c:	f003 fb84 	bl	8003f98 <lcd_set_cursor>
		lcd_printf(&hlcd, "%02d-%02d-%02d",ds3231.time->date,
 8000890:	4b33      	ldr	r3, [pc, #204]	; (8000960 <display_handle+0x1a4>)
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	78db      	ldrb	r3, [r3, #3]
 8000896:	461a      	mov	r2, r3
				ds3231.time->month,ds3231.time->year);
 8000898:	4b31      	ldr	r3, [pc, #196]	; (8000960 <display_handle+0x1a4>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	795b      	ldrb	r3, [r3, #5]
		lcd_printf(&hlcd, "%02d-%02d-%02d",ds3231.time->date,
 800089e:	4619      	mov	r1, r3
				ds3231.time->month,ds3231.time->year);
 80008a0:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <display_handle+0x1a4>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	799b      	ldrb	r3, [r3, #6]
		lcd_printf(&hlcd, "%02d-%02d-%02d",ds3231.time->date,
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	460b      	mov	r3, r1
 80008aa:	4930      	ldr	r1, [pc, #192]	; (800096c <display_handle+0x1b0>)
 80008ac:	482d      	ldr	r0, [pc, #180]	; (8000964 <display_handle+0x1a8>)
 80008ae:	f003 fbad 	bl	800400c <lcd_printf>
		break;
 80008b2:	e050      	b.n	8000956 <display_handle+0x19a>
	case timer_mode:
		lcd_set_cursor(&hlcd, 0, 2);
 80008b4:	2202      	movs	r2, #2
 80008b6:	2100      	movs	r1, #0
 80008b8:	482a      	ldr	r0, [pc, #168]	; (8000964 <display_handle+0x1a8>)
 80008ba:	f003 fb6d 	bl	8003f98 <lcd_set_cursor>
		lcd_printf(&hlcd, "Sport Timer");
 80008be:	492c      	ldr	r1, [pc, #176]	; (8000970 <display_handle+0x1b4>)
 80008c0:	4828      	ldr	r0, [pc, #160]	; (8000964 <display_handle+0x1a8>)
 80008c2:	f003 fba3 	bl	800400c <lcd_printf>
		lcd_set_cursor(&hlcd, 1, 2);
 80008c6:	2202      	movs	r2, #2
 80008c8:	2101      	movs	r1, #1
 80008ca:	4826      	ldr	r0, [pc, #152]	; (8000964 <display_handle+0x1a8>)
 80008cc:	f003 fb64 	bl	8003f98 <lcd_set_cursor>
		lcd_printf(&hlcd, "%02d:%02d:%02d.%03d",display_timer.hour, display_timer.min, display_timer.sec, htim2.Instance->CNT);
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <display_handle+0x1b8>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <display_handle+0x1b8>)
 80008d8:	785b      	ldrb	r3, [r3, #1]
 80008da:	4618      	mov	r0, r3
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <display_handle+0x1b8>)
 80008de:	789b      	ldrb	r3, [r3, #2]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <display_handle+0x1bc>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	9200      	str	r2, [sp, #0]
 80008ec:	4603      	mov	r3, r0
 80008ee:	460a      	mov	r2, r1
 80008f0:	4922      	ldr	r1, [pc, #136]	; (800097c <display_handle+0x1c0>)
 80008f2:	481c      	ldr	r0, [pc, #112]	; (8000964 <display_handle+0x1a8>)
 80008f4:	f003 fb8a 	bl	800400c <lcd_printf>
		break;
 80008f8:	e02d      	b.n	8000956 <display_handle+0x19a>
	case alarm_mode:
		lcd_set_cursor(&hlcd, 0, 2);
 80008fa:	2202      	movs	r2, #2
 80008fc:	2100      	movs	r1, #0
 80008fe:	4819      	ldr	r0, [pc, #100]	; (8000964 <display_handle+0x1a8>)
 8000900:	f003 fb4a 	bl	8003f98 <lcd_set_cursor>
		lcd_printf(&hlcd, "Alarm Mode");
 8000904:	491e      	ldr	r1, [pc, #120]	; (8000980 <display_handle+0x1c4>)
 8000906:	4817      	ldr	r0, [pc, #92]	; (8000964 <display_handle+0x1a8>)
 8000908:	f003 fb80 	bl	800400c <lcd_printf>
		lcd_set_cursor(&hlcd, 1,2);
 800090c:	2202      	movs	r2, #2
 800090e:	2101      	movs	r1, #1
 8000910:	4814      	ldr	r0, [pc, #80]	; (8000964 <display_handle+0x1a8>)
 8000912:	f003 fb41 	bl	8003f98 <lcd_set_cursor>
		lcd_printf(&hlcd, "%02d-%02d",Time_to_alarm.hour, Time_to_alarm.minute);
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <display_handle+0x1c8>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <display_handle+0x1c8>)
 800091e:	785b      	ldrb	r3, [r3, #1]
 8000920:	4919      	ldr	r1, [pc, #100]	; (8000988 <display_handle+0x1cc>)
 8000922:	4810      	ldr	r0, [pc, #64]	; (8000964 <display_handle+0x1a8>)
 8000924:	f003 fb72 	bl	800400c <lcd_printf>
		break;
 8000928:	e015      	b.n	8000956 <display_handle+0x19a>
	case select_ringtone:
		lcd_set_cursor(&hlcd, 0, 2);
 800092a:	2202      	movs	r2, #2
 800092c:	2100      	movs	r1, #0
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <display_handle+0x1a8>)
 8000930:	f003 fb32 	bl	8003f98 <lcd_set_cursor>
		lcd_printf(&hlcd, "Select ringtone");
 8000934:	4915      	ldr	r1, [pc, #84]	; (800098c <display_handle+0x1d0>)
 8000936:	480b      	ldr	r0, [pc, #44]	; (8000964 <display_handle+0x1a8>)
 8000938:	f003 fb68 	bl	800400c <lcd_printf>
		lcd_set_cursor(&hlcd, 1,0);
 800093c:	2200      	movs	r2, #0
 800093e:	2101      	movs	r1, #1
 8000940:	4808      	ldr	r0, [pc, #32]	; (8000964 <display_handle+0x1a8>)
 8000942:	f003 fb29 	bl	8003f98 <lcd_set_cursor>
		lcd_printf(&hlcd, "Track number:%02d",demo_track);
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <display_handle+0x1d4>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	4911      	ldr	r1, [pc, #68]	; (8000994 <display_handle+0x1d8>)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <display_handle+0x1a8>)
 8000950:	f003 fb5c 	bl	800400c <lcd_printf>
		break;
 8000954:	bf00      	nop

	}
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000000 	.word	0x20000000
 8000960:	20000188 	.word	0x20000188
 8000964:	2000017c 	.word	0x2000017c
 8000968:	08004c58 	.word	0x08004c58
 800096c:	08004c68 	.word	0x08004c68
 8000970:	08004c78 	.word	0x08004c78
 8000974:	20000174 	.word	0x20000174
 8000978:	200000dc 	.word	0x200000dc
 800097c:	08004c84 	.word	0x08004c84
 8000980:	08004c98 	.word	0x08004c98
 8000984:	20000170 	.word	0x20000170
 8000988:	08004ca4 	.word	0x08004ca4
 800098c:	08004cb0 	.word	0x08004cb0
 8000990:	20000002 	.word	0x20000002
 8000994:	08004cc0 	.word	0x08004cc0

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	DateTime date1;
 	date1.date = 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	70fb      	strb	r3, [r7, #3]
	date1.day = 31;
 80009a2:	231f      	movs	r3, #31
 80009a4:	713b      	strb	r3, [r7, #4]
	date1.month = 11;
 80009a6:	230b      	movs	r3, #11
 80009a8:	717b      	strb	r3, [r7, #5]
	date1.year = 24;
 80009aa:	2318      	movs	r3, #24
 80009ac:	71bb      	strb	r3, [r7, #6]
	date1.hour = 10;
 80009ae:	230a      	movs	r3, #10
 80009b0:	70bb      	strb	r3, [r7, #2]
	date1.min = 30;
 80009b2:	231e      	movs	r3, #30
 80009b4:	707b      	strb	r3, [r7, #1]
	date1.sec = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	703b      	strb	r3, [r7, #0]
	RTC_WriteTime(&ds3231, &date1);
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	481f      	ldr	r0, [pc, #124]	; (8000a3c <main+0xa4>)
 80009c0:	f003 fc35 	bl	800422e <RTC_WriteTime>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c4:	f000 fae4 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c8:	f000 f84a 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009cc:	f000 f930 	bl	8000c30 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009d0:	f000 f888 	bl	8000ae4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80009d4:	f000 f8b4 	bl	8000b40 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80009d8:	f000 f900 	bl	8000bdc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  button_init(&Button3, GPIOA, GPIO_PIN_3);
 80009dc:	2208      	movs	r2, #8
 80009de:	4918      	ldr	r1, [pc, #96]	; (8000a40 <main+0xa8>)
 80009e0:	4818      	ldr	r0, [pc, #96]	; (8000a44 <main+0xac>)
 80009e2:	f003 f91c 	bl	8003c1e <button_init>
  button_init(&Button4, GPIOA, GPIO_PIN_4);
 80009e6:	2210      	movs	r2, #16
 80009e8:	4915      	ldr	r1, [pc, #84]	; (8000a40 <main+0xa8>)
 80009ea:	4817      	ldr	r0, [pc, #92]	; (8000a48 <main+0xb0>)
 80009ec:	f003 f917 	bl	8003c1e <button_init>
  button_init(&Button5, GPIOA, GPIO_PIN_5);
 80009f0:	2220      	movs	r2, #32
 80009f2:	4913      	ldr	r1, [pc, #76]	; (8000a40 <main+0xa8>)
 80009f4:	4815      	ldr	r0, [pc, #84]	; (8000a4c <main+0xb4>)
 80009f6:	f003 f912 	bl	8003c1e <button_init>
  RTC_Init(&ds3231, &hi2c1, &date1);
 80009fa:	463b      	mov	r3, r7
 80009fc:	461a      	mov	r2, r3
 80009fe:	4914      	ldr	r1, [pc, #80]	; (8000a50 <main+0xb8>)
 8000a00:	480e      	ldr	r0, [pc, #56]	; (8000a3c <main+0xa4>)
 8000a02:	f003 fc5a 	bl	80042ba <RTC_Init>
  DFPLAYER_Init(&mini_player, &huart1);
 8000a06:	4913      	ldr	r1, [pc, #76]	; (8000a54 <main+0xbc>)
 8000a08:	4813      	ldr	r0, [pc, #76]	; (8000a58 <main+0xc0>)
 8000a0a:	f003 f9a9 	bl	8003d60 <DFPLAYER_Init>
  lcd_init(&hlcd, &hi2c1, LCD_ADDR_DEFAULT);
 8000a0e:	2227      	movs	r2, #39	; 0x27
 8000a10:	490f      	ldr	r1, [pc, #60]	; (8000a50 <main+0xb8>)
 8000a12:	4812      	ldr	r0, [pc, #72]	; (8000a5c <main+0xc4>)
 8000a14:	f003 fb31 	bl	800407a <lcd_init>
  DFPLAYER_SetVolume(&mini_player, 27);
 8000a18:	211b      	movs	r1, #27
 8000a1a:	480f      	ldr	r0, [pc, #60]	; (8000a58 <main+0xc0>)
 8000a1c:	f003 f9da 	bl	8003dd4 <DFPLAYER_SetVolume>
    /* USER CODE BEGIN 3 */
//	  lcd_backlight_off(&hlcd);
//	  HAL_Delay(500);
//	  lcd_backlight_on(&hlcd);
//	  HAL_Delay(500);
	  button_handle(&Button3);
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <main+0xac>)
 8000a22:	f003 f854 	bl	8003ace <button_handle>
	  button_handle(&Button4);
 8000a26:	4808      	ldr	r0, [pc, #32]	; (8000a48 <main+0xb0>)
 8000a28:	f003 f851 	bl	8003ace <button_handle>
	  button_handle(&Button5);
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <main+0xb4>)
 8000a2e:	f003 f84e 	bl	8003ace <button_handle>
	  display_handle();
 8000a32:	f7ff fec3 	bl	80007bc <display_handle>
	  alarm_handle();
 8000a36:	f7ff fe63 	bl	8000700 <alarm_handle>
	  button_handle(&Button3);
 8000a3a:	e7f1      	b.n	8000a20 <main+0x88>
 8000a3c:	20000188 	.word	0x20000188
 8000a40:	40010800 	.word	0x40010800
 8000a44:	200001a0 	.word	0x200001a0
 8000a48:	200001b8 	.word	0x200001b8
 8000a4c:	200001d0 	.word	0x200001d0
 8000a50:	20000088 	.word	0x20000088
 8000a54:	20000124 	.word	0x20000124
 8000a58:	20000190 	.word	0x20000190
 8000a5c:	2000017c 	.word	0x2000017c

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b090      	sub	sp, #64	; 0x40
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	2228      	movs	r2, #40	; 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 fc54 	bl	800431c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a86:	2301      	movs	r3, #1
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a92:	2300      	movs	r3, #0
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a96:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fdd9 	bl	8002658 <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000aac:	f000 f8f6 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 f846 	bl	8002b5c <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ad6:	f000 f8e1 	bl	8000c9c <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3740      	adds	r7, #64	; 0x40
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000aea:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_I2C1_Init+0x58>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b22:	f000 fd65 	bl	80015f0 <HAL_I2C_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b2c:	f000 f8b6 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000088 	.word	0x20000088
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	000186a0 	.word	0x000186a0

08000b40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b66:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b86:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b88:	f002 f976 	bl	8002e78 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b92:	f000 f883 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000ba4:	f002 fb66 	bl	8003274 <HAL_TIM_ConfigClockSource>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bae:	f000 f875 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000bc0:	f002 fd3c 	bl	800363c <HAL_TIMEx_MasterConfigSynchronization>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bca:	f000 f867 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200000dc 	.word	0x200000dc

08000bdc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <MX_USART1_UART_Init+0x50>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000be8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000c14:	f002 fd82 	bl	800371c <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c1e:	f000 f83d 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000124 	.word	0x20000124
 8000c2c:	40013800 	.word	0x40013800

08000c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_GPIO_Init+0x64>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <MX_GPIO_Init+0x64>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_GPIO_Init+0x64>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <MX_GPIO_Init+0x64>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a0c      	ldr	r2, [pc, #48]	; (8000c94 <MX_GPIO_Init+0x64>)
 8000c62:	f043 0308 	orr.w	r3, r3, #8
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <MX_GPIO_Init+0x64>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c74:	2338      	movs	r3, #56	; 0x38
 8000c76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	4619      	mov	r1, r3
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_GPIO_Init+0x68>)
 8000c88:	f000 fb16 	bl	80012b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8c:	bf00      	nop
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010800 	.word	0x40010800

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_MspInit+0x5c>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <HAL_MspInit+0x5c>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6193      	str	r3, [r2, #24]
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_MspInit+0x5c>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <HAL_MspInit+0x5c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <HAL_MspInit+0x5c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	61d3      	str	r3, [r2, #28]
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_MspInit+0x5c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_MspInit+0x60>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_MspInit+0x60>)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000

08000d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <HAL_I2C_MspInit+0x70>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d123      	bne.n	8000d74 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0308 	and.w	r3, r3, #8
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d44:	23c0      	movs	r3, #192	; 0xc0
 8000d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d48:	2312      	movs	r3, #18
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4619      	mov	r1, r3
 8000d56:	480b      	ldr	r0, [pc, #44]	; (8000d84 <HAL_I2C_MspInit+0x78>)
 8000d58:	f000 faae 	bl	80012b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d5e:	69db      	ldr	r3, [r3, #28]
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d66:	61d3      	str	r3, [r2, #28]
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d6a:	69db      	ldr	r3, [r3, #28]
 8000d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010c00 	.word	0x40010c00

08000d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d98:	d113      	bne.n	8000dc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_TIM_Base_MspInit+0x44>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <HAL_TIM_Base_MspInit+0x44>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	61d3      	str	r3, [r2, #28]
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_TIM_Base_MspInit+0x44>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2101      	movs	r1, #1
 8000db6:	201c      	movs	r0, #28
 8000db8:	f000 fa47 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dbc:	201c      	movs	r0, #28
 8000dbe:	f000 fa60 	bl	8001282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <HAL_UART_MspInit+0x8c>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d131      	bne.n	8000e54 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <HAL_UART_MspInit+0x90>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a1a      	ldr	r2, [pc, #104]	; (8000e60 <HAL_UART_MspInit+0x90>)
 8000df6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_UART_MspInit+0x90>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_UART_MspInit+0x90>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <HAL_UART_MspInit+0x90>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_UART_MspInit+0x90>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4619      	mov	r1, r3
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <HAL_UART_MspInit+0x94>)
 8000e36:	f000 fa3f 	bl	80012b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <HAL_UART_MspInit+0x94>)
 8000e50:	f000 fa32 	bl	80012b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3720      	adds	r7, #32
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40013800 	.word	0x40013800
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010800 	.word	0x40010800

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <NMI_Handler+0x4>

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eae:	f000 f8b5 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <TIM2_IRQHandler+0x10>)
 8000ebe:	f002 f8d1 	bl	8003064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000dc 	.word	0x200000dc

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f003 fa16 	bl	800432c <__errno>
 8000f00:	4603      	mov	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20005000 	.word	0x20005000
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	200001ec 	.word	0x200001ec
 8000f34:	20000340 	.word	0x20000340

08000f38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f44:	f7ff fff8 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480b      	ldr	r0, [pc, #44]	; (8000f78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f4a:	490c      	ldr	r1, [pc, #48]	; (8000f7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f4c:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f60:	4c09      	ldr	r4, [pc, #36]	; (8000f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f003 f9e3 	bl	8004338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f72:	f7ff fd11 	bl	8000998 <main>
  bx lr
 8000f76:	4770      	bx	lr
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f80:	08004d3c 	.word	0x08004d3c
  ldr r2, =_sbss
 8000f84:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f88:	2000033c 	.word	0x2000033c

08000f8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC1_2_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_Init+0x28>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_Init+0x28>)
 8000f9a:	f043 0310 	orr.w	r3, r3, #16
 8000f9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f947 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	200f      	movs	r0, #15
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f7ff fe7c 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40022000 	.word	0x40022000

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f95f 	bl	800129e <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 f927 	bl	800124a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000004 	.word	0x20000004
 8001014:	2000000c 	.word	0x2000000c
 8001018:	20000008 	.word	0x20000008

0800101c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_IncTick+0x1c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <HAL_IncTick+0x20>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a03      	ldr	r2, [pc, #12]	; (800103c <HAL_IncTick+0x20>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	2000000c 	.word	0x2000000c
 800103c:	200001f0 	.word	0x200001f0

08001040 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b02      	ldr	r3, [pc, #8]	; (8001050 <HAL_GetTick+0x10>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	200001f0 	.word	0x200001f0

08001054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800105c:	f7ff fff0 	bl	8001040 <HAL_GetTick>
 8001060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800106c:	d005      	beq.n	800107a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_Delay+0x44>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800107a:	bf00      	nop
 800107c:	f7ff ffe0 	bl	8001040 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	429a      	cmp	r2, r3
 800108a:	d8f7      	bhi.n	800107c <HAL_Delay+0x28>
  {
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000000c 	.word	0x2000000c

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4906      	ldr	r1, [pc, #24]	; (8001134 <__NVIC_EnableIRQ+0x34>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	490c      	ldr	r1, [pc, #48]	; (8001184 <__NVIC_SetPriority+0x4c>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4908      	ldr	r1, [pc, #32]	; (8001188 <__NVIC_SetPriority+0x50>)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	3b04      	subs	r3, #4
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43d9      	mvns	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	4313      	orrs	r3, r2
         );
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff90 	bl	8001138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff2d 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff42 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff90 	bl	800118c <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5f 	bl	8001138 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff35 	bl	8001100 <__NVIC_EnableIRQ>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffa2 	bl	80011f0 <SysTick_Config>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b08b      	sub	sp, #44	; 0x2c
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ca:	e169      	b.n	80015a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012cc:	2201      	movs	r2, #1
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	f040 8158 	bne.w	800159a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a9a      	ldr	r2, [pc, #616]	; (8001558 <HAL_GPIO_Init+0x2a0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d05e      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 80012f4:	4a98      	ldr	r2, [pc, #608]	; (8001558 <HAL_GPIO_Init+0x2a0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d875      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 80012fa:	4a98      	ldr	r2, [pc, #608]	; (800155c <HAL_GPIO_Init+0x2a4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d058      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 8001300:	4a96      	ldr	r2, [pc, #600]	; (800155c <HAL_GPIO_Init+0x2a4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d86f      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 8001306:	4a96      	ldr	r2, [pc, #600]	; (8001560 <HAL_GPIO_Init+0x2a8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d052      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 800130c:	4a94      	ldr	r2, [pc, #592]	; (8001560 <HAL_GPIO_Init+0x2a8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d869      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 8001312:	4a94      	ldr	r2, [pc, #592]	; (8001564 <HAL_GPIO_Init+0x2ac>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d04c      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 8001318:	4a92      	ldr	r2, [pc, #584]	; (8001564 <HAL_GPIO_Init+0x2ac>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d863      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 800131e:	4a92      	ldr	r2, [pc, #584]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d046      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 8001324:	4a90      	ldr	r2, [pc, #576]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d85d      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 800132a:	2b12      	cmp	r3, #18
 800132c:	d82a      	bhi.n	8001384 <HAL_GPIO_Init+0xcc>
 800132e:	2b12      	cmp	r3, #18
 8001330:	d859      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 8001332:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <HAL_GPIO_Init+0x80>)
 8001334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001338:	080013b3 	.word	0x080013b3
 800133c:	0800138d 	.word	0x0800138d
 8001340:	0800139f 	.word	0x0800139f
 8001344:	080013e1 	.word	0x080013e1
 8001348:	080013e7 	.word	0x080013e7
 800134c:	080013e7 	.word	0x080013e7
 8001350:	080013e7 	.word	0x080013e7
 8001354:	080013e7 	.word	0x080013e7
 8001358:	080013e7 	.word	0x080013e7
 800135c:	080013e7 	.word	0x080013e7
 8001360:	080013e7 	.word	0x080013e7
 8001364:	080013e7 	.word	0x080013e7
 8001368:	080013e7 	.word	0x080013e7
 800136c:	080013e7 	.word	0x080013e7
 8001370:	080013e7 	.word	0x080013e7
 8001374:	080013e7 	.word	0x080013e7
 8001378:	080013e7 	.word	0x080013e7
 800137c:	08001395 	.word	0x08001395
 8001380:	080013a9 	.word	0x080013a9
 8001384:	4a79      	ldr	r2, [pc, #484]	; (800156c <HAL_GPIO_Init+0x2b4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800138a:	e02c      	b.n	80013e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	623b      	str	r3, [r7, #32]
          break;
 8001392:	e029      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	3304      	adds	r3, #4
 800139a:	623b      	str	r3, [r7, #32]
          break;
 800139c:	e024      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	3308      	adds	r3, #8
 80013a4:	623b      	str	r3, [r7, #32]
          break;
 80013a6:	e01f      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	330c      	adds	r3, #12
 80013ae:	623b      	str	r3, [r7, #32]
          break;
 80013b0:	e01a      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ba:	2304      	movs	r3, #4
 80013bc:	623b      	str	r3, [r7, #32]
          break;
 80013be:	e013      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d105      	bne.n	80013d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013c8:	2308      	movs	r3, #8
 80013ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	611a      	str	r2, [r3, #16]
          break;
 80013d2:	e009      	b.n	80013e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d4:	2308      	movs	r3, #8
 80013d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	615a      	str	r2, [r3, #20]
          break;
 80013de:	e003      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
          break;
 80013e4:	e000      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          break;
 80013e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2bff      	cmp	r3, #255	; 0xff
 80013ec:	d801      	bhi.n	80013f2 <HAL_GPIO_Init+0x13a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	e001      	b.n	80013f6 <HAL_GPIO_Init+0x13e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3304      	adds	r3, #4
 80013f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d802      	bhi.n	8001404 <HAL_GPIO_Init+0x14c>
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	e002      	b.n	800140a <HAL_GPIO_Init+0x152>
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	3b08      	subs	r3, #8
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	210f      	movs	r1, #15
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	401a      	ands	r2, r3
 800141c:	6a39      	ldr	r1, [r7, #32]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	431a      	orrs	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80b1 	beq.w	800159a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001438:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <HAL_GPIO_Init+0x2b8>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a4c      	ldr	r2, [pc, #304]	; (8001570 <HAL_GPIO_Init+0x2b8>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <HAL_GPIO_Init+0x2b8>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001450:	4a48      	ldr	r2, [pc, #288]	; (8001574 <HAL_GPIO_Init+0x2bc>)
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	220f      	movs	r2, #15
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a40      	ldr	r2, [pc, #256]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d013      	beq.n	80014a4 <HAL_GPIO_Init+0x1ec>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a3f      	ldr	r2, [pc, #252]	; (800157c <HAL_GPIO_Init+0x2c4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d00d      	beq.n	80014a0 <HAL_GPIO_Init+0x1e8>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a3e      	ldr	r2, [pc, #248]	; (8001580 <HAL_GPIO_Init+0x2c8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d007      	beq.n	800149c <HAL_GPIO_Init+0x1e4>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a3d      	ldr	r2, [pc, #244]	; (8001584 <HAL_GPIO_Init+0x2cc>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d101      	bne.n	8001498 <HAL_GPIO_Init+0x1e0>
 8001494:	2303      	movs	r3, #3
 8001496:	e006      	b.n	80014a6 <HAL_GPIO_Init+0x1ee>
 8001498:	2304      	movs	r3, #4
 800149a:	e004      	b.n	80014a6 <HAL_GPIO_Init+0x1ee>
 800149c:	2302      	movs	r3, #2
 800149e:	e002      	b.n	80014a6 <HAL_GPIO_Init+0x1ee>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_GPIO_Init+0x1ee>
 80014a4:	2300      	movs	r3, #0
 80014a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a8:	f002 0203 	and.w	r2, r2, #3
 80014ac:	0092      	lsls	r2, r2, #2
 80014ae:	4093      	lsls	r3, r2
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014b6:	492f      	ldr	r1, [pc, #188]	; (8001574 <HAL_GPIO_Init+0x2bc>)
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014d0:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	492c      	ldr	r1, [pc, #176]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	608b      	str	r3, [r1, #8]
 80014dc:	e006      	b.n	80014ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014de:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	4928      	ldr	r1, [pc, #160]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	4922      	ldr	r1, [pc, #136]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	60cb      	str	r3, [r1, #12]
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	43db      	mvns	r3, r3
 800150e:	491e      	ldr	r1, [pc, #120]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 8001510:	4013      	ands	r3, r2
 8001512:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4918      	ldr	r1, [pc, #96]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
 800152c:	e006      	b.n	800153c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	43db      	mvns	r3, r3
 8001536:	4914      	ldr	r1, [pc, #80]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 8001538:	4013      	ands	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d021      	beq.n	800158c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	490e      	ldr	r1, [pc, #56]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
 8001554:	e021      	b.n	800159a <HAL_GPIO_Init+0x2e2>
 8001556:	bf00      	nop
 8001558:	10320000 	.word	0x10320000
 800155c:	10310000 	.word	0x10310000
 8001560:	10220000 	.word	0x10220000
 8001564:	10210000 	.word	0x10210000
 8001568:	10120000 	.word	0x10120000
 800156c:	10110000 	.word	0x10110000
 8001570:	40021000 	.word	0x40021000
 8001574:	40010000 	.word	0x40010000
 8001578:	40010800 	.word	0x40010800
 800157c:	40010c00 	.word	0x40010c00
 8001580:	40011000 	.word	0x40011000
 8001584:	40011400 	.word	0x40011400
 8001588:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_GPIO_Init+0x304>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	43db      	mvns	r3, r3
 8001594:	4909      	ldr	r1, [pc, #36]	; (80015bc <HAL_GPIO_Init+0x304>)
 8001596:	4013      	ands	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	3301      	adds	r3, #1
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	fa22 f303 	lsr.w	r3, r2, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f47f ae8e 	bne.w	80012cc <HAL_GPIO_Init+0x14>
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	372c      	adds	r7, #44	; 0x2c
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	e001      	b.n	80015e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e12b      	b.n	800185a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fb78 	bl	8000d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2224      	movs	r2, #36	; 0x24
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001654:	f001 fbca 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a81      	ldr	r2, [pc, #516]	; (8001864 <HAL_I2C_Init+0x274>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d807      	bhi.n	8001674 <HAL_I2C_Init+0x84>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4a80      	ldr	r2, [pc, #512]	; (8001868 <HAL_I2C_Init+0x278>)
 8001668:	4293      	cmp	r3, r2
 800166a:	bf94      	ite	ls
 800166c:	2301      	movls	r3, #1
 800166e:	2300      	movhi	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	e006      	b.n	8001682 <HAL_I2C_Init+0x92>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4a7d      	ldr	r2, [pc, #500]	; (800186c <HAL_I2C_Init+0x27c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	bf94      	ite	ls
 800167c:	2301      	movls	r3, #1
 800167e:	2300      	movhi	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0e7      	b.n	800185a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4a78      	ldr	r2, [pc, #480]	; (8001870 <HAL_I2C_Init+0x280>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0c9b      	lsrs	r3, r3, #18
 8001694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a6a      	ldr	r2, [pc, #424]	; (8001864 <HAL_I2C_Init+0x274>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d802      	bhi.n	80016c4 <HAL_I2C_Init+0xd4>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3301      	adds	r3, #1
 80016c2:	e009      	b.n	80016d8 <HAL_I2C_Init+0xe8>
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016ca:	fb02 f303 	mul.w	r3, r2, r3
 80016ce:	4a69      	ldr	r2, [pc, #420]	; (8001874 <HAL_I2C_Init+0x284>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	3301      	adds	r3, #1
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	430b      	orrs	r3, r1
 80016de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	495c      	ldr	r1, [pc, #368]	; (8001864 <HAL_I2C_Init+0x274>)
 80016f4:	428b      	cmp	r3, r1
 80016f6:	d819      	bhi.n	800172c <HAL_I2C_Init+0x13c>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1e59      	subs	r1, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fbb1 f3f3 	udiv	r3, r1, r3
 8001706:	1c59      	adds	r1, r3, #1
 8001708:	f640 73fc 	movw	r3, #4092	; 0xffc
 800170c:	400b      	ands	r3, r1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00a      	beq.n	8001728 <HAL_I2C_Init+0x138>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1e59      	subs	r1, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001720:	3301      	adds	r3, #1
 8001722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001726:	e051      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 8001728:	2304      	movs	r3, #4
 800172a:	e04f      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d111      	bne.n	8001758 <HAL_I2C_Init+0x168>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1e58      	subs	r0, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	440b      	add	r3, r1
 8001742:	fbb0 f3f3 	udiv	r3, r0, r3
 8001746:	3301      	adds	r3, #1
 8001748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	e012      	b.n	800177e <HAL_I2C_Init+0x18e>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e58      	subs	r0, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	0099      	lsls	r1, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	fbb0 f3f3 	udiv	r3, r0, r3
 800176e:	3301      	adds	r3, #1
 8001770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf0c      	ite	eq
 8001778:	2301      	moveq	r3, #1
 800177a:	2300      	movne	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_I2C_Init+0x196>
 8001782:	2301      	movs	r3, #1
 8001784:	e022      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10e      	bne.n	80017ac <HAL_I2C_Init+0x1bc>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1e58      	subs	r0, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6859      	ldr	r1, [r3, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	440b      	add	r3, r1
 800179c:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017aa:	e00f      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	0099      	lsls	r1, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	6809      	ldr	r1, [r1, #0]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69da      	ldr	r2, [r3, #28]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6911      	ldr	r1, [r2, #16]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68d2      	ldr	r2, [r2, #12]
 8001806:	4311      	orrs	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	430b      	orrs	r3, r1
 800180e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	000186a0 	.word	0x000186a0
 8001868:	001e847f 	.word	0x001e847f
 800186c:	003d08ff 	.word	0x003d08ff
 8001870:	431bde83 	.word	0x431bde83
 8001874:	10624dd3 	.word	0x10624dd3

08001878 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af02      	add	r7, sp, #8
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	461a      	mov	r2, r3
 8001884:	460b      	mov	r3, r1
 8001886:	817b      	strh	r3, [r7, #10]
 8001888:	4613      	mov	r3, r2
 800188a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7ff fbd8 	bl	8001040 <HAL_GetTick>
 8001890:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b20      	cmp	r3, #32
 800189c:	f040 80e0 	bne.w	8001a60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2319      	movs	r3, #25
 80018a6:	2201      	movs	r2, #1
 80018a8:	4970      	ldr	r1, [pc, #448]	; (8001a6c <HAL_I2C_Master_Transmit+0x1f4>)
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 fc9e 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018b6:	2302      	movs	r3, #2
 80018b8:	e0d3      	b.n	8001a62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_I2C_Master_Transmit+0x50>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e0cc      	b.n	8001a62 <HAL_I2C_Master_Transmit+0x1ea>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d007      	beq.n	80018ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0201 	orr.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2221      	movs	r2, #33	; 0x21
 8001902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2210      	movs	r2, #16
 800190a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	893a      	ldrh	r2, [r7, #8]
 800191e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4a50      	ldr	r2, [pc, #320]	; (8001a70 <HAL_I2C_Master_Transmit+0x1f8>)
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001930:	8979      	ldrh	r1, [r7, #10]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	6a3a      	ldr	r2, [r7, #32]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 fb08 	bl	8001f4c <I2C_MasterRequestWrite>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e08d      	b.n	8001a62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800195c:	e066      	b.n	8001a2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	6a39      	ldr	r1, [r7, #32]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 fd5c 	bl	8002420 <I2C_WaitOnTXEFlagUntilTimeout>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00d      	beq.n	800198a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	2b04      	cmp	r3, #4
 8001974:	d107      	bne.n	8001986 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001984:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e06b      	b.n	8001a62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d11b      	bne.n	8001a00 <HAL_I2C_Master_Transmit+0x188>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d017      	beq.n	8001a00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	781a      	ldrb	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	6a39      	ldr	r1, [r7, #32]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 fd53 	bl	80024b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00d      	beq.n	8001a2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d107      	bne.n	8001a28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e01a      	b.n	8001a62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d194      	bne.n	800195e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	e000      	b.n	8001a62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a60:	2302      	movs	r3, #2
  }
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	00100002 	.word	0x00100002
 8001a70:	ffff0000 	.word	0xffff0000

08001a74 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08c      	sub	sp, #48	; 0x30
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	460b      	mov	r3, r1
 8001a82:	817b      	strh	r3, [r7, #10]
 8001a84:	4613      	mov	r3, r2
 8001a86:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff fad8 	bl	8001040 <HAL_GetTick>
 8001a90:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b20      	cmp	r3, #32
 8001a9c:	f040 824b 	bne.w	8001f36 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2319      	movs	r3, #25
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	497f      	ldr	r1, [pc, #508]	; (8001ca8 <HAL_I2C_Master_Receive+0x234>)
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 fb9e 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e23e      	b.n	8001f38 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_I2C_Master_Receive+0x54>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e237      	b.n	8001f38 <HAL_I2C_Master_Receive+0x4c4>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d007      	beq.n	8001aee <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0201 	orr.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001afc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2222      	movs	r2, #34	; 0x22
 8001b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2210      	movs	r2, #16
 8001b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	893a      	ldrh	r2, [r7, #8]
 8001b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4a5f      	ldr	r2, [pc, #380]	; (8001cac <HAL_I2C_Master_Receive+0x238>)
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b30:	8979      	ldrh	r1, [r7, #10]
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fa8a 	bl	8002050 <I2C_MasterRequestRead>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e1f8      	b.n	8001f38 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d113      	bne.n	8001b76 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e1cc      	b.n	8001f10 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d11e      	bne.n	8001bbc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b8e:	b672      	cpsid	i
}
 8001b90:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001bb8:	b662      	cpsie	i
}
 8001bba:	e035      	b.n	8001c28 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d11e      	bne.n	8001c02 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001bfe:	b662      	cpsie	i
}
 8001c00:	e012      	b.n	8001c28 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001c28:	e172      	b.n	8001f10 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	f200 811f 	bhi.w	8001e72 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d123      	bne.n	8001c84 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 fc7d 	bl	8002540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e173      	b.n	8001f38 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c82:	e145      	b.n	8001f10 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d152      	bne.n	8001d32 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c92:	2200      	movs	r2, #0
 8001c94:	4906      	ldr	r1, [pc, #24]	; (8001cb0 <HAL_I2C_Master_Receive+0x23c>)
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 faa8 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d008      	beq.n	8001cb4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e148      	b.n	8001f38 <HAL_I2C_Master_Receive+0x4c4>
 8001ca6:	bf00      	nop
 8001ca8:	00100002 	.word	0x00100002
 8001cac:	ffff0000 	.word	0xffff0000
 8001cb0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001cfa:	b662      	cpsie	i
}
 8001cfc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d30:	e0ee      	b.n	8001f10 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d38:	2200      	movs	r2, #0
 8001d3a:	4981      	ldr	r1, [pc, #516]	; (8001f40 <HAL_I2C_Master_Receive+0x4cc>)
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 fa55 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0f5      	b.n	8001f38 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5c:	b672      	cpsid	i
}
 8001d5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001d92:	4b6c      	ldr	r3, [pc, #432]	; (8001f44 <HAL_I2C_Master_Receive+0x4d0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	08db      	lsrs	r3, r3, #3
 8001d98:	4a6b      	ldr	r2, [pc, #428]	; (8001f48 <HAL_I2C_Master_Receive+0x4d4>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0a1a      	lsrs	r2, r3, #8
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00da      	lsls	r2, r3, #3
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d118      	bne.n	8001dea <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f043 0220 	orr.w	r2, r3, #32
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001dda:	b662      	cpsie	i
}
 8001ddc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0a6      	b.n	8001f38 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d1d9      	bne.n	8001dac <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e3a:	b662      	cpsie	i
}
 8001e3c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e70:	e04e      	b.n	8001f10 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 fb62 	bl	8002540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e058      	b.n	8001f38 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d124      	bne.n	8001f10 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d107      	bne.n	8001ede <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001edc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f47f ae88 	bne.w	8001c2a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
  }
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	00010004 	.word	0x00010004
 8001f44:	20000004 	.word	0x20000004
 8001f48:	14f8b589 	.word	0x14f8b589

08001f4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d006      	beq.n	8001f76 <I2C_MasterRequestWrite+0x2a>
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d003      	beq.n	8001f76 <I2C_MasterRequestWrite+0x2a>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f74:	d108      	bne.n	8001f88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e00b      	b.n	8001fa0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	2b12      	cmp	r3, #18
 8001f8e:	d107      	bne.n	8001fa0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 f91d 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00d      	beq.n	8001fd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc6:	d103      	bne.n	8001fd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e035      	b.n	8002040 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fdc:	d108      	bne.n	8001ff0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fde:	897b      	ldrh	r3, [r7, #10]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fec:	611a      	str	r2, [r3, #16]
 8001fee:	e01b      	b.n	8002028 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ff0:	897b      	ldrh	r3, [r7, #10]
 8001ff2:	11db      	asrs	r3, r3, #7
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f003 0306 	and.w	r3, r3, #6
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f063 030f 	orn	r3, r3, #15
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	490e      	ldr	r1, [pc, #56]	; (8002048 <I2C_MasterRequestWrite+0xfc>)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f966 	bl	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e010      	b.n	8002040 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800201e:	897b      	ldrh	r3, [r7, #10]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4907      	ldr	r1, [pc, #28]	; (800204c <I2C_MasterRequestWrite+0x100>)
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f956 	bl	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	00010008 	.word	0x00010008
 800204c:	00010002 	.word	0x00010002

08002050 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af02      	add	r7, sp, #8
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	460b      	mov	r3, r1
 800205e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002074:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d006      	beq.n	800208a <I2C_MasterRequestRead+0x3a>
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d003      	beq.n	800208a <I2C_MasterRequestRead+0x3a>
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002088:	d108      	bne.n	800209c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e00b      	b.n	80020b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	2b11      	cmp	r3, #17
 80020a2:	d107      	bne.n	80020b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f893 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00d      	beq.n	80020e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020da:	d103      	bne.n	80020e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e079      	b.n	80021dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020f0:	d108      	bne.n	8002104 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020f2:	897b      	ldrh	r3, [r7, #10]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	611a      	str	r2, [r3, #16]
 8002102:	e05f      	b.n	80021c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002104:	897b      	ldrh	r3, [r7, #10]
 8002106:	11db      	asrs	r3, r3, #7
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f003 0306 	and.w	r3, r3, #6
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f063 030f 	orn	r3, r3, #15
 8002114:	b2da      	uxtb	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4930      	ldr	r1, [pc, #192]	; (80021e4 <I2C_MasterRequestRead+0x194>)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f8dc 	bl	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e054      	b.n	80021dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002132:	897b      	ldrh	r3, [r7, #10]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4929      	ldr	r1, [pc, #164]	; (80021e8 <I2C_MasterRequestRead+0x198>)
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f8cc 	bl	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e044      	b.n	80021dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002176:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f831 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00d      	beq.n	80021ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800219e:	d103      	bne.n	80021a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e017      	b.n	80021dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80021ac:	897b      	ldrh	r3, [r7, #10]
 80021ae:	11db      	asrs	r3, r3, #7
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f003 0306 	and.w	r3, r3, #6
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f063 030e 	orn	r3, r3, #14
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	4907      	ldr	r1, [pc, #28]	; (80021e8 <I2C_MasterRequestRead+0x198>)
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f888 	bl	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	00010008 	.word	0x00010008
 80021e8:	00010002 	.word	0x00010002

080021ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021fc:	e048      	b.n	8002290 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d044      	beq.n	8002290 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002206:	f7fe ff1b 	bl	8001040 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d302      	bcc.n	800221c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d139      	bne.n	8002290 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	0c1b      	lsrs	r3, r3, #16
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d10d      	bne.n	8002242 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	43da      	mvns	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	4013      	ands	r3, r2
 8002232:	b29b      	uxth	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	e00c      	b.n	800225c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	43da      	mvns	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	4013      	ands	r3, r2
 800224e:	b29b      	uxth	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	429a      	cmp	r2, r3
 8002260:	d116      	bne.n	8002290 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f043 0220 	orr.w	r2, r3, #32
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e023      	b.n	80022d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	0c1b      	lsrs	r3, r3, #16
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d10d      	bne.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	43da      	mvns	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	4013      	ands	r3, r2
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	e00c      	b.n	80022d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	43da      	mvns	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	4013      	ands	r3, r2
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d093      	beq.n	80021fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022ee:	e071      	b.n	80023d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fe:	d123      	bne.n	8002348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002318:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f043 0204 	orr.w	r2, r3, #4
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e067      	b.n	8002418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d041      	beq.n	80023d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002350:	f7fe fe76 	bl	8001040 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	d302      	bcc.n	8002366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d136      	bne.n	80023d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	0c1b      	lsrs	r3, r3, #16
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d10c      	bne.n	800238a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4013      	ands	r3, r2
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	bf14      	ite	ne
 8002382:	2301      	movne	r3, #1
 8002384:	2300      	moveq	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	e00b      	b.n	80023a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	43da      	mvns	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	4013      	ands	r3, r2
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf14      	ite	ne
 800239c:	2301      	movne	r3, #1
 800239e:	2300      	moveq	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d016      	beq.n	80023d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f043 0220 	orr.w	r2, r3, #32
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e021      	b.n	8002418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	0c1b      	lsrs	r3, r3, #16
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d10c      	bne.n	80023f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	43da      	mvns	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	4013      	ands	r3, r2
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e00b      	b.n	8002410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4013      	ands	r3, r2
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	f47f af6d 	bne.w	80022f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800242c:	e034      	b.n	8002498 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f8e3 	bl	80025fa <I2C_IsAcknowledgeFailed>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e034      	b.n	80024a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d028      	beq.n	8002498 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002446:	f7fe fdfb 	bl	8001040 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	429a      	cmp	r2, r3
 8002454:	d302      	bcc.n	800245c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d11d      	bne.n	8002498 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002466:	2b80      	cmp	r3, #128	; 0x80
 8002468:	d016      	beq.n	8002498 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f043 0220 	orr.w	r2, r3, #32
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e007      	b.n	80024a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a2:	2b80      	cmp	r3, #128	; 0x80
 80024a4:	d1c3      	bne.n	800242e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024bc:	e034      	b.n	8002528 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f89b 	bl	80025fa <I2C_IsAcknowledgeFailed>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e034      	b.n	8002538 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d028      	beq.n	8002528 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d6:	f7fe fdb3 	bl	8001040 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d302      	bcc.n	80024ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d11d      	bne.n	8002528 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d016      	beq.n	8002528 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f043 0220 	orr.w	r2, r3, #32
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e007      	b.n	8002538 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b04      	cmp	r3, #4
 8002534:	d1c3      	bne.n	80024be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800254c:	e049      	b.n	80025e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b10      	cmp	r3, #16
 800255a:	d119      	bne.n	8002590 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0210 	mvn.w	r2, #16
 8002564:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e030      	b.n	80025f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002590:	f7fe fd56 	bl	8001040 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	429a      	cmp	r2, r3
 800259e:	d302      	bcc.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11d      	bne.n	80025e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d016      	beq.n	80025e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f043 0220 	orr.w	r2, r3, #32
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e007      	b.n	80025f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ec:	2b40      	cmp	r3, #64	; 0x40
 80025ee:	d1ae      	bne.n	800254e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002610:	d11b      	bne.n	800264a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800261a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f043 0204 	orr.w	r2, r3, #4
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
	...

08002658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e272      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8087 	beq.w	8002786 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002678:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b04      	cmp	r3, #4
 8002682:	d00c      	beq.n	800269e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002684:	4b8f      	ldr	r3, [pc, #572]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d112      	bne.n	80026b6 <HAL_RCC_OscConfig+0x5e>
 8002690:	4b8c      	ldr	r3, [pc, #560]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d10b      	bne.n	80026b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269e:	4b89      	ldr	r3, [pc, #548]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d06c      	beq.n	8002784 <HAL_RCC_OscConfig+0x12c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d168      	bne.n	8002784 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e24c      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x76>
 80026c0:	4b80      	ldr	r3, [pc, #512]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a7f      	ldr	r2, [pc, #508]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	e02e      	b.n	800272c <HAL_RCC_OscConfig+0xd4>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x98>
 80026d6:	4b7b      	ldr	r3, [pc, #492]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7a      	ldr	r2, [pc, #488]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b78      	ldr	r3, [pc, #480]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a77      	ldr	r2, [pc, #476]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e01d      	b.n	800272c <HAL_RCC_OscConfig+0xd4>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0xbc>
 80026fa:	4b72      	ldr	r3, [pc, #456]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a71      	ldr	r2, [pc, #452]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b6f      	ldr	r3, [pc, #444]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a6e      	ldr	r2, [pc, #440]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e00b      	b.n	800272c <HAL_RCC_OscConfig+0xd4>
 8002714:	4b6b      	ldr	r3, [pc, #428]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a6a      	ldr	r2, [pc, #424]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800271a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a67      	ldr	r2, [pc, #412]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe fc84 	bl	8001040 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800273c:	f7fe fc80 	bl	8001040 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e200      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b5d      	ldr	r3, [pc, #372]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0xe4>
 800275a:	e014      	b.n	8002786 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7fe fc70 	bl	8001040 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002764:	f7fe fc6c 	bl	8001040 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e1ec      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x10c>
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d063      	beq.n	800285a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002792:	4b4c      	ldr	r3, [pc, #304]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800279e:	4b49      	ldr	r3, [pc, #292]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d11c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x18c>
 80027aa:	4b46      	ldr	r3, [pc, #280]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d116      	bne.n	80027e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	4b43      	ldr	r3, [pc, #268]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x176>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e1c0      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ce:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4939      	ldr	r1, [pc, #228]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	e03a      	b.n	800285a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d020      	beq.n	800282e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ec:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <HAL_RCC_OscConfig+0x270>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe fc25 	bl	8001040 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fa:	f7fe fc21 	bl	8001040 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e1a1      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002818:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4927      	ldr	r1, [pc, #156]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
 800282c:	e015      	b.n	800285a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282e:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <HAL_RCC_OscConfig+0x270>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7fe fc04 	bl	8001040 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283c:	f7fe fc00 	bl	8001040 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e180      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d03a      	beq.n	80028dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d019      	beq.n	80028a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286e:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_RCC_OscConfig+0x274>)
 8002870:	2201      	movs	r2, #1
 8002872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002874:	f7fe fbe4 	bl	8001040 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287c:	f7fe fbe0 	bl	8001040 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e160      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800289a:	2001      	movs	r0, #1
 800289c:	f000 face 	bl	8002e3c <RCC_Delay>
 80028a0:	e01c      	b.n	80028dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_RCC_OscConfig+0x274>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a8:	f7fe fbca 	bl	8001040 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ae:	e00f      	b.n	80028d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b0:	f7fe fbc6 	bl	8001040 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d908      	bls.n	80028d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e146      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	42420000 	.word	0x42420000
 80028cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d0:	4b92      	ldr	r3, [pc, #584]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1e9      	bne.n	80028b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a6 	beq.w	8002a36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ee:	4b8b      	ldr	r3, [pc, #556]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10d      	bne.n	8002916 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	4b88      	ldr	r3, [pc, #544]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	4a87      	ldr	r2, [pc, #540]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002904:	61d3      	str	r3, [r2, #28]
 8002906:	4b85      	ldr	r3, [pc, #532]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002916:	4b82      	ldr	r3, [pc, #520]	; (8002b20 <HAL_RCC_OscConfig+0x4c8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d118      	bne.n	8002954 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002922:	4b7f      	ldr	r3, [pc, #508]	; (8002b20 <HAL_RCC_OscConfig+0x4c8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7e      	ldr	r2, [pc, #504]	; (8002b20 <HAL_RCC_OscConfig+0x4c8>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292e:	f7fe fb87 	bl	8001040 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002936:	f7fe fb83 	bl	8001040 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b64      	cmp	r3, #100	; 0x64
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e103      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	4b75      	ldr	r3, [pc, #468]	; (8002b20 <HAL_RCC_OscConfig+0x4c8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x312>
 800295c:	4b6f      	ldr	r3, [pc, #444]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4a6e      	ldr	r2, [pc, #440]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6213      	str	r3, [r2, #32]
 8002968:	e02d      	b.n	80029c6 <HAL_RCC_OscConfig+0x36e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x334>
 8002972:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4a69      	ldr	r2, [pc, #420]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	6213      	str	r3, [r2, #32]
 800297e:	4b67      	ldr	r3, [pc, #412]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	4a66      	ldr	r2, [pc, #408]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002984:	f023 0304 	bic.w	r3, r3, #4
 8002988:	6213      	str	r3, [r2, #32]
 800298a:	e01c      	b.n	80029c6 <HAL_RCC_OscConfig+0x36e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b05      	cmp	r3, #5
 8002992:	d10c      	bne.n	80029ae <HAL_RCC_OscConfig+0x356>
 8002994:	4b61      	ldr	r3, [pc, #388]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4a60      	ldr	r2, [pc, #384]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	4b5e      	ldr	r3, [pc, #376]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4a5d      	ldr	r2, [pc, #372]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6213      	str	r3, [r2, #32]
 80029ac:	e00b      	b.n	80029c6 <HAL_RCC_OscConfig+0x36e>
 80029ae:	4b5b      	ldr	r3, [pc, #364]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4a5a      	ldr	r2, [pc, #360]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	6213      	str	r3, [r2, #32]
 80029ba:	4b58      	ldr	r3, [pc, #352]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	4a57      	ldr	r2, [pc, #348]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	f023 0304 	bic.w	r3, r3, #4
 80029c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d015      	beq.n	80029fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fb37 	bl	8001040 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	e00a      	b.n	80029ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe fb33 	bl	8001040 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e0b1      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	4b4b      	ldr	r3, [pc, #300]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0ee      	beq.n	80029d6 <HAL_RCC_OscConfig+0x37e>
 80029f8:	e014      	b.n	8002a24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fa:	f7fe fb21 	bl	8001040 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7fe fb1d 	bl	8001040 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e09b      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a18:	4b40      	ldr	r3, [pc, #256]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ee      	bne.n	8002a02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d105      	bne.n	8002a36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2a:	4b3c      	ldr	r3, [pc, #240]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	4a3b      	ldr	r2, [pc, #236]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8087 	beq.w	8002b4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a40:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d061      	beq.n	8002b10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d146      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a54:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <HAL_RCC_OscConfig+0x4cc>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe faf1 	bl	8001040 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a62:	f7fe faed 	bl	8001040 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e06d      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a74:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a88:	d108      	bne.n	8002a9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a8a:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4921      	ldr	r1, [pc, #132]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a9c:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a19      	ldr	r1, [r3, #32]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	430b      	orrs	r3, r1
 8002aae:	491b      	ldr	r1, [pc, #108]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_RCC_OscConfig+0x4cc>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7fe fac1 	bl	8001040 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe fabd 	bl	8001040 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e03d      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x46a>
 8002ae0:	e035      	b.n	8002b4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_RCC_OscConfig+0x4cc>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe faaa 	bl	8001040 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe faa6 	bl	8001040 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e026      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x498>
 8002b0e:	e01e      	b.n	8002b4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e019      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40007000 	.word	0x40007000
 8002b24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_RCC_OscConfig+0x500>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000

08002b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0d0      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d910      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 0207 	bic.w	r2, r3, #7
 8002b86:	4965      	ldr	r1, [pc, #404]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0b8      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	494d      	ldr	r1, [pc, #308]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d040      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d115      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e07f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e073      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06b      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3a:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f023 0203 	bic.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4936      	ldr	r1, [pc, #216]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c4c:	f7fe f9f8 	bl	8001040 <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c54:	f7fe f9f4 	bl	8001040 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e053      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 020c 	and.w	r2, r3, #12
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d1eb      	bne.n	8002c54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d210      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 0207 	bic.w	r2, r3, #7
 8002c92:	4922      	ldr	r1, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e032      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4916      	ldr	r1, [pc, #88]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	490e      	ldr	r1, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cea:	f000 f821 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	490a      	ldr	r1, [pc, #40]	; (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfc:	5ccb      	ldrb	r3, [r1, r3]
 8002cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1cc>)
 8002d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1d0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe f956 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40021000 	.word	0x40021000
 8002d24:	08004cd4 	.word	0x08004cd4
 8002d28:	20000004 	.word	0x20000004
 8002d2c:	20000008 	.word	0x20000008

08002d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d002      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x30>
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0x36>
 8002d5e:	e027      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d62:	613b      	str	r3, [r7, #16]
      break;
 8002d64:	e027      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	0c9b      	lsrs	r3, r3, #18
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d70:	5cd3      	ldrb	r3, [r2, r3]
 8002d72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	0c5b      	lsrs	r3, r3, #17
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	4a11      	ldr	r2, [pc, #68]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d8a:	5cd3      	ldrb	r3, [r2, r3]
 8002d8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d92:	fb03 f202 	mul.w	r2, r3, r2
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e004      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a0c      	ldr	r2, [pc, #48]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002da4:	fb02 f303 	mul.w	r3, r2, r3
 8002da8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	613b      	str	r3, [r7, #16]
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002db2:	613b      	str	r3, [r7, #16]
      break;
 8002db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db6:	693b      	ldr	r3, [r7, #16]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	007a1200 	.word	0x007a1200
 8002dcc:	08004cec 	.word	0x08004cec
 8002dd0:	08004cfc 	.word	0x08004cfc
 8002dd4:	003d0900 	.word	0x003d0900

08002dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ddc:	4b02      	ldr	r3, [pc, #8]	; (8002de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	20000004 	.word	0x20000004

08002dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002df0:	f7ff fff2 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4903      	ldr	r1, [pc, #12]	; (8002e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08004ce4 	.word	0x08004ce4

08002e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e18:	f7ff ffde 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	0adb      	lsrs	r3, r3, #11
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4903      	ldr	r1, [pc, #12]	; (8002e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	08004ce4 	.word	0x08004ce4

08002e3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <RCC_Delay+0x34>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <RCC_Delay+0x38>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	0a5b      	lsrs	r3, r3, #9
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e58:	bf00      	nop
  }
  while (Delay --);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1e5a      	subs	r2, r3, #1
 8002e5e:	60fa      	str	r2, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f9      	bne.n	8002e58 <RCC_Delay+0x1c>
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	20000004 	.word	0x20000004
 8002e74:	10624dd3 	.word	0x10624dd3

08002e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e041      	b.n	8002f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fd ff72 	bl	8000d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f000 fac8 	bl	800344c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a1a      	ldr	r2, [r3, #32]
 8002f24:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10f      	bne.n	8002f4e <HAL_TIM_Base_Stop+0x38>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	f240 4344 	movw	r3, #1092	; 0x444
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_TIM_Base_Stop+0x38>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d001      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e03a      	b.n	8002ff2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <HAL_TIM_Base_Start_IT+0x98>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00e      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x58>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d009      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x58>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a14      	ldr	r2, [pc, #80]	; (8003000 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x58>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a13      	ldr	r2, [pc, #76]	; (8003004 <HAL_TIM_Base_Start_IT+0xa0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d111      	bne.n	8002fe0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d010      	beq.n	8002ff0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fde:	e007      	b.n	8002ff0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	40000400 	.word	0x40000400
 8003004:	40000800 	.word	0x40000800

08003008 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6a1a      	ldr	r2, [r3, #32]
 8003026:	f241 1311 	movw	r3, #4369	; 0x1111
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10f      	bne.n	8003050 <HAL_TIM_Base_Stop_IT+0x48>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6a1a      	ldr	r2, [r3, #32]
 8003036:	f240 4344 	movw	r3, #1092	; 0x444
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d107      	bne.n	8003050 <HAL_TIM_Base_Stop_IT+0x48>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b02      	cmp	r3, #2
 8003078:	d122      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b02      	cmp	r3, #2
 8003086:	d11b      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0202 	mvn.w	r2, #2
 8003090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f9b4 	bl	8003414 <HAL_TIM_IC_CaptureCallback>
 80030ac:	e005      	b.n	80030ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f9a7 	bl	8003402 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f9b6 	bl	8003426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d122      	bne.n	8003114 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d11b      	bne.n	8003114 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0204 	mvn.w	r2, #4
 80030e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f98a 	bl	8003414 <HAL_TIM_IC_CaptureCallback>
 8003100:	e005      	b.n	800310e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f97d 	bl	8003402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f98c 	bl	8003426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b08      	cmp	r3, #8
 8003120:	d122      	bne.n	8003168 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b08      	cmp	r3, #8
 800312e:	d11b      	bne.n	8003168 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0208 	mvn.w	r2, #8
 8003138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2204      	movs	r2, #4
 800313e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f960 	bl	8003414 <HAL_TIM_IC_CaptureCallback>
 8003154:	e005      	b.n	8003162 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f953 	bl	8003402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f962 	bl	8003426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b10      	cmp	r3, #16
 8003174:	d122      	bne.n	80031bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b10      	cmp	r3, #16
 8003182:	d11b      	bne.n	80031bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0210 	mvn.w	r2, #16
 800318c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2208      	movs	r2, #8
 8003192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f936 	bl	8003414 <HAL_TIM_IC_CaptureCallback>
 80031a8:	e005      	b.n	80031b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f929 	bl	8003402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f938 	bl	8003426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d10e      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d107      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0201 	mvn.w	r2, #1
 80031e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fc ffba 	bl	800015c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f2:	2b80      	cmp	r3, #128	; 0x80
 80031f4:	d10e      	bne.n	8003214 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003200:	2b80      	cmp	r3, #128	; 0x80
 8003202:	d107      	bne.n	8003214 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800320c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fa7b 	bl	800370a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b40      	cmp	r3, #64	; 0x40
 8003220:	d10e      	bne.n	8003240 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d107      	bne.n	8003240 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f8fc 	bl	8003438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b20      	cmp	r3, #32
 800324c:	d10e      	bne.n	800326c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b20      	cmp	r3, #32
 800325a:	d107      	bne.n	800326c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0220 	mvn.w	r2, #32
 8003264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fa46 	bl	80036f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_TIM_ConfigClockSource+0x1c>
 800328c:	2302      	movs	r3, #2
 800328e:	e0b4      	b.n	80033fa <HAL_TIM_ConfigClockSource+0x186>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c8:	d03e      	beq.n	8003348 <HAL_TIM_ConfigClockSource+0xd4>
 80032ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ce:	f200 8087 	bhi.w	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 80032d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d6:	f000 8086 	beq.w	80033e6 <HAL_TIM_ConfigClockSource+0x172>
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032de:	d87f      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 80032e0:	2b70      	cmp	r3, #112	; 0x70
 80032e2:	d01a      	beq.n	800331a <HAL_TIM_ConfigClockSource+0xa6>
 80032e4:	2b70      	cmp	r3, #112	; 0x70
 80032e6:	d87b      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 80032e8:	2b60      	cmp	r3, #96	; 0x60
 80032ea:	d050      	beq.n	800338e <HAL_TIM_ConfigClockSource+0x11a>
 80032ec:	2b60      	cmp	r3, #96	; 0x60
 80032ee:	d877      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 80032f0:	2b50      	cmp	r3, #80	; 0x50
 80032f2:	d03c      	beq.n	800336e <HAL_TIM_ConfigClockSource+0xfa>
 80032f4:	2b50      	cmp	r3, #80	; 0x50
 80032f6:	d873      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d058      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0x13a>
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d86f      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003300:	2b30      	cmp	r3, #48	; 0x30
 8003302:	d064      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15a>
 8003304:	2b30      	cmp	r3, #48	; 0x30
 8003306:	d86b      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003308:	2b20      	cmp	r3, #32
 800330a:	d060      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15a>
 800330c:	2b20      	cmp	r3, #32
 800330e:	d867      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d05c      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15a>
 8003314:	2b10      	cmp	r3, #16
 8003316:	d05a      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15a>
 8003318:	e062      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800332a:	f000 f968 	bl	80035fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800333c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	609a      	str	r2, [r3, #8]
      break;
 8003346:	e04f      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003358:	f000 f951 	bl	80035fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800336a:	609a      	str	r2, [r3, #8]
      break;
 800336c:	e03c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337a:	461a      	mov	r2, r3
 800337c:	f000 f8c8 	bl	8003510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2150      	movs	r1, #80	; 0x50
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f91f 	bl	80035ca <TIM_ITRx_SetConfig>
      break;
 800338c:	e02c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800339a:	461a      	mov	r2, r3
 800339c:	f000 f8e6 	bl	800356c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2160      	movs	r1, #96	; 0x60
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f90f 	bl	80035ca <TIM_ITRx_SetConfig>
      break;
 80033ac:	e01c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ba:	461a      	mov	r2, r3
 80033bc:	f000 f8a8 	bl	8003510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2140      	movs	r1, #64	; 0x40
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f8ff 	bl	80035ca <TIM_ITRx_SetConfig>
      break;
 80033cc:	e00c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4619      	mov	r1, r3
 80033d8:	4610      	mov	r0, r2
 80033da:	f000 f8f6 	bl	80035ca <TIM_ITRx_SetConfig>
      break;
 80033de:	e003      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      break;
 80033e4:	e000      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr

08003426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr
	...

0800344c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a29      	ldr	r2, [pc, #164]	; (8003504 <TIM_Base_SetConfig+0xb8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00b      	beq.n	800347c <TIM_Base_SetConfig+0x30>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346a:	d007      	beq.n	800347c <TIM_Base_SetConfig+0x30>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a26      	ldr	r2, [pc, #152]	; (8003508 <TIM_Base_SetConfig+0xbc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_Base_SetConfig+0x30>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a25      	ldr	r2, [pc, #148]	; (800350c <TIM_Base_SetConfig+0xc0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d108      	bne.n	800348e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a1c      	ldr	r2, [pc, #112]	; (8003504 <TIM_Base_SetConfig+0xb8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00b      	beq.n	80034ae <TIM_Base_SetConfig+0x62>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349c:	d007      	beq.n	80034ae <TIM_Base_SetConfig+0x62>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a19      	ldr	r2, [pc, #100]	; (8003508 <TIM_Base_SetConfig+0xbc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d003      	beq.n	80034ae <TIM_Base_SetConfig+0x62>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a18      	ldr	r2, [pc, #96]	; (800350c <TIM_Base_SetConfig+0xc0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d108      	bne.n	80034c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a07      	ldr	r2, [pc, #28]	; (8003504 <TIM_Base_SetConfig+0xb8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d103      	bne.n	80034f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	615a      	str	r2, [r3, #20]
}
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	40012c00 	.word	0x40012c00
 8003508:	40000400 	.word	0x40000400
 800350c:	40000800 	.word	0x40000800

08003510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f023 0201 	bic.w	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800353a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f023 030a 	bic.w	r3, r3, #10
 800354c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	621a      	str	r2, [r3, #32]
}
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	f023 0210 	bic.w	r2, r3, #16
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	031b      	lsls	r3, r3, #12
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	621a      	str	r2, [r3, #32]
}
 80035c0:	bf00      	nop
 80035c2:	371c      	adds	r7, #28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr

080035ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f043 0307 	orr.w	r3, r3, #7
 80035ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035fe:	b480      	push	{r7}
 8003600:	b087      	sub	sp, #28
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
 800360a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003618:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	021a      	lsls	r2, r3, #8
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	431a      	orrs	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4313      	orrs	r3, r2
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	609a      	str	r2, [r3, #8]
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003650:	2302      	movs	r3, #2
 8003652:	e046      	b.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a16      	ldr	r2, [pc, #88]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00e      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a0:	d009      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a10      	ldr	r2, [pc, #64]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10c      	bne.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800

080036f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e042      	b.n	80037b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd fb44 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	; 0x24
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800375e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f91d 	bl	80039a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d16d      	bne.n	80038b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_UART_Transmit+0x2c>
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e066      	b.n	80038ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2221      	movs	r2, #33	; 0x21
 80037f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037fa:	f7fd fc21 	bl	8001040 <HAL_GetTick>
 80037fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	88fa      	ldrh	r2, [r7, #6]
 800380a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003814:	d108      	bne.n	8003828 <HAL_UART_Transmit+0x6c>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d104      	bne.n	8003828 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	e003      	b.n	8003830 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003830:	e02a      	b.n	8003888 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2200      	movs	r2, #0
 800383a:	2180      	movs	r1, #128	; 0x80
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f840 	bl	80038c2 <UART_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e036      	b.n	80038ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10b      	bne.n	800386a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003860:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	3302      	adds	r3, #2
 8003866:	61bb      	str	r3, [r7, #24]
 8003868:	e007      	b.n	800387a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	781a      	ldrb	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	3301      	adds	r3, #1
 8003878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1cf      	bne.n	8003832 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2200      	movs	r2, #0
 800389a:	2140      	movs	r1, #64	; 0x40
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f810 	bl	80038c2 <UART_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e006      	b.n	80038ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3720      	adds	r7, #32
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b090      	sub	sp, #64	; 0x40
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	4613      	mov	r3, r2
 80038d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d2:	e050      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038da:	d04c      	beq.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80038e2:	f7fd fbad 	bl	8001040 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d241      	bcs.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	e853 3f00 	ldrex	r3, [r3]
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003912:	637a      	str	r2, [r7, #52]	; 0x34
 8003914:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e5      	bne.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3314      	adds	r3, #20
 800392c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	613b      	str	r3, [r7, #16]
   return(result);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f023 0301 	bic.w	r3, r3, #1
 800393c:	63bb      	str	r3, [r7, #56]	; 0x38
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3314      	adds	r3, #20
 8003944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003946:	623a      	str	r2, [r7, #32]
 8003948:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	69f9      	ldr	r1, [r7, #28]
 800394c:	6a3a      	ldr	r2, [r7, #32]
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	61bb      	str	r3, [r7, #24]
   return(result);
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e5      	bne.n	8003926 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e00f      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4013      	ands	r3, r2
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	429a      	cmp	r2, r3
 8003984:	bf0c      	ite	eq
 8003986:	2301      	moveq	r3, #1
 8003988:	2300      	movne	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	429a      	cmp	r2, r3
 8003992:	d09f      	beq.n	80038d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3740      	adds	r7, #64	; 0x40
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039da:	f023 030c 	bic.w	r3, r3, #12
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a2c      	ldr	r2, [pc, #176]	; (8003ab4 <UART_SetConfig+0x114>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a08:	f7ff fa04 	bl	8002e14 <HAL_RCC_GetPCLK2Freq>
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	e002      	b.n	8003a16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a10:	f7ff f9ec 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8003a14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009a      	lsls	r2, r3, #2
 8003a20:	441a      	add	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	4a22      	ldr	r2, [pc, #136]	; (8003ab8 <UART_SetConfig+0x118>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	0119      	lsls	r1, r3, #4
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009a      	lsls	r2, r3, #2
 8003a40:	441a      	add	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a4c:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <UART_SetConfig+0x118>)
 8003a4e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2064      	movs	r0, #100	; 0x64
 8003a56:	fb00 f303 	mul.w	r3, r0, r3
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	3332      	adds	r3, #50	; 0x32
 8003a60:	4a15      	ldr	r2, [pc, #84]	; (8003ab8 <UART_SetConfig+0x118>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a6c:	4419      	add	r1, r3
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	009a      	lsls	r2, r3, #2
 8003a78:	441a      	add	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <UART_SetConfig+0x118>)
 8003a86:	fba3 0302 	umull	r0, r3, r3, r2
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	2064      	movs	r0, #100	; 0x64
 8003a8e:	fb00 f303 	mul.w	r3, r0, r3
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	3332      	adds	r3, #50	; 0x32
 8003a98:	4a07      	ldr	r2, [pc, #28]	; (8003ab8 <UART_SetConfig+0x118>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	f003 020f 	and.w	r2, r3, #15
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	440a      	add	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003aac:	bf00      	nop
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40013800 	.word	0x40013800
 8003ab8:	51eb851f 	.word	0x51eb851f

08003abc <btn_pressing_callback>:
#include "Button.h"
//---------------var button------------


__weak void	btn_pressing_callback(Button_Typdef *ButtonX)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <button_handle>:
__weak void btn_press_timeout3s_callback(Button_Typdef *ButtonX)
{
}

void button_handle(Button_Typdef *ButtonX)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
	//------------------ Loc nhieu ------------------------
	uint8_t sta = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8a9b      	ldrh	r3, [r3, #20]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	f7fd fd6d 	bl	80015c0 <HAL_GPIO_ReadPin>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	73fb      	strb	r3, [r7, #15]
	if(sta != ButtonX->btn_filter)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	789b      	ldrb	r3, [r3, #2]
 8003aee:	7bfa      	ldrb	r2, [r7, #15]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d00a      	beq.n	8003b0a <button_handle+0x3c>
	{
		ButtonX->btn_filter = sta;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	7bfa      	ldrb	r2, [r7, #15]
 8003af8:	709a      	strb	r2, [r3, #2]
		ButtonX->is_debouncing = 1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	70da      	strb	r2, [r3, #3]
		ButtonX->time_deboune = HAL_GetTick();
 8003b00:	f7fd fa9e 	bl	8001040 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	605a      	str	r2, [r3, #4]
	}
	//------------------ Tin hieu da xac lap------------------------
	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->time_deboune >= 15))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	78db      	ldrb	r3, [r3, #3]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00e      	beq.n	8003b30 <button_handle+0x62>
 8003b12:	f7fd fa95 	bl	8001040 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b0e      	cmp	r3, #14
 8003b20:	d906      	bls.n	8003b30 <button_handle+0x62>
	{
		ButtonX->btn_current = ButtonX->btn_filter;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	789a      	ldrb	r2, [r3, #2]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	701a      	strb	r2, [r3, #0]
		ButtonX->is_debouncing =0;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	70da      	strb	r2, [r3, #3]
	}
	//---------------------Xu li nhan nha------------------------
	if(ButtonX->btn_current != ButtonX->btn_last)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	781a      	ldrb	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d022      	beq.n	8003b82 <button_handle+0xb4>
	{
		if(ButtonX->btn_current == 0)//nhan xuong
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <button_handle+0x8e>
		{
			ButtonX->is_press_timeout = 1;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	731a      	strb	r2, [r3, #12]
			btn_pressing_callback(ButtonX);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff ffb6 	bl	8003abc <btn_pressing_callback>
			ButtonX->time_start_press = HAL_GetTick();
 8003b50:	f7fd fa76 	bl	8001040 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	e00e      	b.n	8003b7a <button_handle+0xac>

		}
		else //nha nut
		{
			if(HAL_GetTick() - ButtonX->time_start_press <= 1000)
 8003b5c:	f7fd fa70 	bl	8001040 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b6c:	d802      	bhi.n	8003b74 <button_handle+0xa6>
			{
				btn_press_short_callback(ButtonX);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fc fb2a 	bl	80001c8 <btn_press_short_callback>
			}
			ButtonX->is_press_timeout = 0;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	731a      	strb	r2, [r3, #12]

		}
		ButtonX->btn_last = ButtonX->btn_current;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	781a      	ldrb	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	705a      	strb	r2, [r3, #1]
	}
	//-------------Xu li nhan giu----------------
	if(ButtonX->is_press_timeout && (HAL_GetTick() - ButtonX->time_start_press >= 4000))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7b1b      	ldrb	r3, [r3, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00f      	beq.n	8003baa <button_handle+0xdc>
 8003b8a:	f7fd fa59 	bl	8001040 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003b9a:	d306      	bcc.n	8003baa <button_handle+0xdc>
	{
		btn_press_timeout3s_callback(ButtonX);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fc fd8f 	bl	80006c0 <btn_press_timeout3s_callback>
		ButtonX->is_press_timeout =0;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	731a      	strb	r2, [r3, #12]
 8003ba8:	e035      	b.n	8003c16 <button_handle+0x148>
	}
	else if( ButtonX->is_press_timeout && (HAL_GetTick() - ButtonX->time_start_press < 4000) && (HAL_GetTick() - ButtonX->time_start_press >= 2500))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	7b1b      	ldrb	r3, [r3, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d016      	beq.n	8003be0 <button_handle+0x112>
 8003bb2:	f7fd fa45 	bl	8001040 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003bc2:	d20d      	bcs.n	8003be0 <button_handle+0x112>
 8003bc4:	f7fd fa3c 	bl	8001040 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d903      	bls.n	8003be0 <button_handle+0x112>
	{
		btn_press_timeout2s_callback(ButtonX);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7fc fd51 	bl	8000680 <btn_press_timeout2s_callback>
 8003bde:	e01a      	b.n	8003c16 <button_handle+0x148>

	}
	else if( ButtonX->is_press_timeout && (HAL_GetTick() - ButtonX->time_start_press < 2500) && (HAL_GetTick() - ButtonX->time_start_press >= 1000))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	7b1b      	ldrb	r3, [r3, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d016      	beq.n	8003c16 <button_handle+0x148>
 8003be8:	f7fd fa2a 	bl	8001040 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d80c      	bhi.n	8003c16 <button_handle+0x148>
 8003bfc:	f7fd fa20 	bl	8001040 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c0c:	d303      	bcc.n	8003c16 <button_handle+0x148>
	{
		btn_press_timeout1s_callback(ButtonX);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fc fd1a 	bl	8000648 <btn_press_timeout1s_callback>
	}
	
	
}
 8003c14:	e7ff      	b.n	8003c16 <button_handle+0x148>
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <button_init>:
void button_init(Button_Typdef *ButtonX,GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	80fb      	strh	r3, [r7, #6]
	ButtonX->GPIOx = GPIOx;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	611a      	str	r2, [r3, #16]
	ButtonX->GPIO_Pin = GPIO_Pin;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	88fa      	ldrh	r2, [r7, #6]
 8003c36:	829a      	strh	r2, [r3, #20]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <DFPLAYER_SendUART>:
#include "DFPLAYER.h"
uint8_t SendFrame[10] = {0x7E, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};

//******************************** LOW Level Functions ****************************//
static void DFPLAYER_SendUART(DFPLAYER_Name* MP3)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(MP3->DFP_UART, (uint8_t *)&MP3->SendBuff, sizeof(MP3->SendBuff), 1000);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	1d19      	adds	r1, r3, #4
 8003c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c56:	220a      	movs	r2, #10
 8003c58:	f7ff fdb0 	bl	80037bc <HAL_UART_Transmit>
}
 8003c5c:	bf00      	nop
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <DFPLAYER_Delay>:
static void DFPLAYER_Delay(uint16_t Time)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fd f9ef 	bl	8001054 <HAL_Delay>
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <DFPLAYER_GetChecksum>:

static uint16_t DFPLAYER_GetChecksum (uint8_t *thebuf)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
	uint16_t sum = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	81fb      	strh	r3, [r7, #14]
	for (int i=1; i<7; i++) 
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	e00a      	b.n	8003ca6 <DFPLAYER_GetChecksum+0x28>
	{
		sum += thebuf[i];
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	89fb      	ldrh	r3, [r7, #14]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	81fb      	strh	r3, [r7, #14]
	for (int i=1; i<7; i++) 
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b06      	cmp	r3, #6
 8003caa:	ddf1      	ble.n	8003c90 <DFPLAYER_GetChecksum+0x12>
	}
	return -sum;
 8003cac:	89fb      	ldrh	r3, [r7, #14]
 8003cae:	425b      	negs	r3, r3
 8003cb0:	b29b      	uxth	r3, r3
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <DFPLAYER_FillBigend>:

static void DFPLAYER_FillBigend (uint8_t *thebuf, uint16_t data) {
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	807b      	strh	r3, [r7, #2]
	*thebuf =	(uint8_t)(data>>8);
 8003cc8:	887b      	ldrh	r3, [r7, #2]
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	701a      	strb	r2, [r3, #0]
	*(thebuf+1) =	(uint8_t)data;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	887a      	ldrh	r2, [r7, #2]
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <DFPLAYER_FillChecksum>:

static void DFPLAYER_FillChecksum (DFPLAYER_Name* MP3){
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	uint16_t checksum = DFPLAYER_GetChecksum (MP3->SendBuff);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff ffc2 	bl	8003c7e <DFPLAYER_GetChecksum>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	81fb      	strh	r3, [r7, #14]
	DFPLAYER_FillBigend (MP3->SendBuff+7, checksum);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	3307      	adds	r3, #7
 8003d04:	89fa      	ldrh	r2, [r7, #14]
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff ffd7 	bl	8003cbc <DFPLAYER_FillBigend>
}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <DFPLAYER_SendCmd>:

static void DFPLAYER_SendCmd(DFPLAYER_Name* MP3, uint8_t cmd, uint16_t high_arg, uint16_t low_arg)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	4608      	mov	r0, r1
 8003d20:	4611      	mov	r1, r2
 8003d22:	461a      	mov	r2, r3
 8003d24:	4603      	mov	r3, r0
 8003d26:	72fb      	strb	r3, [r7, #11]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	813b      	strh	r3, [r7, #8]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	80fb      	strh	r3, [r7, #6]
	DFPLAYER_Delay(100);
 8003d30:	2064      	movs	r0, #100	; 0x64
 8003d32:	f7ff ff97 	bl	8003c64 <DFPLAYER_Delay>
	MP3->SendBuff[3] = cmd;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	7afa      	ldrb	r2, [r7, #11]
 8003d3a:	71da      	strb	r2, [r3, #7]
	MP3->SendBuff[5] = high_arg;
 8003d3c:	893b      	ldrh	r3, [r7, #8]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	725a      	strb	r2, [r3, #9]
	MP3->SendBuff[6] = low_arg;
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	729a      	strb	r2, [r3, #10]
	DFPLAYER_FillChecksum(MP3);
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7ff ffcb 	bl	8003ce8 <DFPLAYER_FillChecksum>
	DFPLAYER_SendUART(MP3);
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff ff75 	bl	8003c42 <DFPLAYER_SendUART>
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <DFPLAYER_Init>:

//******************************** High Level Functions ****************************//
void DFPLAYER_Init(DFPLAYER_Name* MP3, UART_HandleTypeDef* UART)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<10; i++)
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e00c      	b.n	8003d8a <DFPLAYER_Init+0x2a>
	{
		MP3->SendBuff[i] = SendFrame[i];
 8003d70:	4a0b      	ldr	r2, [pc, #44]	; (8003da0 <DFPLAYER_Init+0x40>)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4413      	add	r3, r2
 8003d76:	7819      	ldrb	r1, [r3, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3304      	adds	r3, #4
 8003d80:	460a      	mov	r2, r1
 8003d82:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<10; i++)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3301      	adds	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b09      	cmp	r3, #9
 8003d8e:	ddef      	ble.n	8003d70 <DFPLAYER_Init+0x10>
	}
	MP3->DFP_UART = UART;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	601a      	str	r2, [r3, #0]
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	20000010 	.word	0x20000010

08003da4 <DFPLAYER_PlayTrack>:

void DFPLAYER_PlayTrack(DFPLAYER_Name* MP3, uint16_t num)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	807b      	strh	r3, [r7, #2]
	uint8_t num1 = num>>8;
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	73fb      	strb	r3, [r7, #15]
	uint8_t num2 = num;
 8003db8:	887b      	ldrh	r3, [r7, #2]
 8003dba:	73bb      	strb	r3, [r7, #14]
	DFPLAYER_SendCmd(MP3, DFP_PLAYTRACK, num1, num2);
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	7bbb      	ldrb	r3, [r7, #14]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2103      	movs	r1, #3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff ffa5 	bl	8003d16 <DFPLAYER_SendCmd>
}
 8003dcc:	bf00      	nop
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <DFPLAYER_SetVolume>:
{
	DFPLAYER_SendCmd(MP3, DFP_PREV,00,00);
}

void DFPLAYER_SetVolume(DFPLAYER_Name* MP3, uint16_t volume)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	807b      	strh	r3, [r7, #2]
	uint8_t volume1 = volume>>8;
 8003de0:	887b      	ldrh	r3, [r7, #2]
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	73fb      	strb	r3, [r7, #15]
	uint8_t volume2 = volume;
 8003de8:	887b      	ldrh	r3, [r7, #2]
 8003dea:	73bb      	strb	r3, [r7, #14]
	DFPLAYER_SendCmd(MP3, DFP_SETVOLUME, volume1, volume2);
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	7bbb      	ldrb	r3, [r7, #14]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2106      	movs	r1, #6
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ff8d 	bl	8003d16 <DFPLAYER_SendCmd>
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <DFPLAYER_Stop>:
{
	DFPLAYER_SendCmd(MP3, DFP_PAUSE, 00, 00);
}

void DFPLAYER_Stop(DFPLAYER_Name* MP3)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	DFPLAYER_SendCmd (MP3, DFP_STOP, 00, 00);
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2116      	movs	r1, #22
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ff7f 	bl	8003d16 <DFPLAYER_SendCmd>
}
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <lcd_send_cmd>:
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include "LiquidCrystal_I2C.h"
static void lcd_send_cmd (LiquidCrystal_I2C *lcd, uint8_t cmd)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	70fb      	strb	r3, [r7, #3]
  uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd&0xf0);
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	f023 030f 	bic.w	r3, r3, #15
 8003e32:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	7a5a      	ldrb	r2, [r3, #9]
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0304 	orr.w	r3, r3, #4
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	7a5a      	ldrb	r2, [r3, #9]
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	7a5a      	ldrb	r2, [r3, #9]
 8003e5c:	7bbb      	ldrb	r3, [r7, #14]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f043 0304 	orr.w	r3, r3, #4
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	7a5a      	ldrb	r2, [r3, #9]
 8003e6e:	7bbb      	ldrb	r3, [r7, #14]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6858      	ldr	r0, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b299      	uxth	r1, r3
 8003e80:	f107 0208 	add.w	r2, r7, #8
 8003e84:	2364      	movs	r3, #100	; 0x64
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2304      	movs	r3, #4
 8003e8a:	f7fd fcf5 	bl	8001878 <HAL_I2C_Master_Transmit>
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <lcd_send_data>:

static void lcd_send_data(LiquidCrystal_I2C *lcd,uint8_t data)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b086      	sub	sp, #24
 8003e9a:	af02      	add	r7, sp, #8
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	70fb      	strb	r3, [r7, #3]
	uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (data&0xf0);
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	f023 030f 	bic.w	r3, r3, #15
 8003ea8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	7a5a      	ldrb	r2, [r3, #9]
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f043 0305 	orr.w	r3, r3, #5
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7a5a      	ldrb	r2, [r3, #9]
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	7a5a      	ldrb	r2, [r3, #9]
 8003ed8:	7bbb      	ldrb	r3, [r7, #14]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f043 0305 	orr.w	r3, r3, #5
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	7a5a      	ldrb	r2, [r3, #9]
 8003eea:	7bbb      	ldrb	r3, [r7, #14]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6858      	ldr	r0, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	b299      	uxth	r1, r3
 8003f02:	f107 0208 	add.w	r2, r7, #8
 8003f06:	2364      	movs	r3, #100	; 0x64
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	2304      	movs	r3, #4
 8003f0c:	f7fd fcb4 	bl	8001878 <HAL_I2C_Master_Transmit>
}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <lcd_clear_display>:
{
	lcd_send_data(lcd,data);
}

void lcd_clear_display (LiquidCrystal_I2C *lcd)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY);
 8003f20:	2101      	movs	r1, #1
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ff7c 	bl	8003e20 <lcd_send_cmd>
	HAL_Delay(1);
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f7fd f893 	bl	8001054 <HAL_Delay>
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <lcd_backlight_on>:
	lcd->DisplayControl |= LCD_DISPLAYON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}

void lcd_backlight_on(LiquidCrystal_I2C *lcd)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af02      	add	r7, sp, #8
 8003f3c:	6078      	str	r0, [r7, #4]
	lcd->Backlightval = LCD_BACKLIGHT;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2208      	movs	r2, #8
 8003f42:	725a      	strb	r2, [r3, #9]
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,&lcd->Backlightval, 1, 100);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6858      	ldr	r0, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b299      	uxth	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f103 0209 	add.w	r2, r3, #9
 8003f54:	2364      	movs	r3, #100	; 0x64
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f7fd fc8d 	bl	8001878 <HAL_I2C_Master_Transmit>
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <lcd_backlight_off>:

void lcd_backlight_off(LiquidCrystal_I2C *lcd)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af02      	add	r7, sp, #8
 8003f6c:	6078      	str	r0, [r7, #4]
	lcd->Backlightval = LCD_NOBACKLIGHT;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	725a      	strb	r2, [r3, #9]
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,&lcd->Backlightval, 1, 100);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6858      	ldr	r0, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	b299      	uxth	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f103 0209 	add.w	r2, r3, #9
 8003f84:	2364      	movs	r3, #100	; 0x64
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f7fd fc75 	bl	8001878 <HAL_I2C_Master_Transmit>
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <lcd_set_cursor>:

void lcd_set_cursor(LiquidCrystal_I2C *lcd,uint8_t row, uint8_t col)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	70fb      	strb	r3, [r7, #3]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	70bb      	strb	r3, [r7, #2]
	uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <lcd_set_cursor+0x40>)
 8003faa:	60fb      	str	r3, [r7, #12]
	lcd_send_cmd(lcd,LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	3310      	adds	r3, #16
 8003fb0:	443b      	add	r3, r7
 8003fb2:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8003fb6:	78bb      	ldrb	r3, [r7, #2]
 8003fb8:	4413      	add	r3, r2
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	b25b      	sxtb	r3, r3
 8003fbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fc2:	b25b      	sxtb	r3, r3
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ff29 	bl	8003e20 <lcd_send_cmd>
}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	54144000 	.word	0x54144000

08003fdc <lcd_set_cursor_blink_off>:
	
	lcd->DisplayControl |= LCD_BLINKON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}
void lcd_set_cursor_blink_off(LiquidCrystal_I2C *lcd) 
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	lcd->DisplayControl &= ~LCD_BLINKON;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	7a1b      	ldrb	r3, [r3, #8]
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	7a1b      	ldrb	r3, [r3, #8]
 8003ff6:	f043 0308 	orr.w	r3, r3, #8
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff ff0e 	bl	8003e20 <lcd_send_cmd>
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <lcd_printf>:
void lcd_write(LiquidCrystal_I2C *lcd,uint8_t location)
{
	lcd_send_data(lcd,location);
}
void lcd_printf(LiquidCrystal_I2C *lcd,const char* str, ...)
{
 800400c:	b40e      	push	{r1, r2, r3}
 800400e:	b590      	push	{r4, r7, lr}
 8004010:	b08a      	sub	sp, #40	; 0x28
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  char stringArray[20];
	
  va_list args;
  va_start(args, str);
 8004016:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800401a:	60fb      	str	r3, [r7, #12]
  vsprintf(stringArray, str, args);
 800401c:	f107 0310 	add.w	r3, r7, #16
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004024:	4618      	mov	r0, r3
 8004026:	f000 f96f 	bl	8004308 <vsiprintf>
  va_end(args);
	
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800402a:	2300      	movs	r3, #0
 800402c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004030:	e00e      	b.n	8004050 <lcd_printf+0x44>
  {
    lcd_send_data(lcd,(uint8_t)stringArray[i]);
 8004032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004036:	3328      	adds	r3, #40	; 0x28
 8004038:	443b      	add	r3, r7
 800403a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800403e:	4619      	mov	r1, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff ff28 	bl	8003e96 <lcd_send_data>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8004046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800404a:	3301      	adds	r3, #1
 800404c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004050:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8004054:	f107 0310 	add.w	r3, r7, #16
 8004058:	4618      	mov	r0, r3
 800405a:	f7fc f877 	bl	800014c <strlen>
 800405e:	4603      	mov	r3, r0
 8004060:	429c      	cmp	r4, r3
 8004062:	d203      	bcs.n	800406c <lcd_printf+0x60>
 8004064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004068:	2b0f      	cmp	r3, #15
 800406a:	d9e2      	bls.n	8004032 <lcd_printf+0x26>
  }
}
 800406c:	bf00      	nop
 800406e:	3728      	adds	r7, #40	; 0x28
 8004070:	46bd      	mov	sp, r7
 8004072:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004076:	b003      	add	sp, #12
 8004078:	4770      	bx	lr

0800407a <lcd_init>:
void lcd_init (LiquidCrystal_I2C *lcd,I2C_HandleTypeDef *_hi2c,uint8_t addr)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	4613      	mov	r3, r2
 8004086:	71fb      	strb	r3, [r7, #7]
	lcd->pI2c = _hi2c;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	605a      	str	r2, [r3, #4]
	lcd->Addr = addr<<1;
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	b2da      	uxtb	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	701a      	strb	r2, [r3, #0]
	lcd->DisplayControl |= LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	7a1b      	ldrb	r3, [r3, #8]
 800409c:	f043 0304 	orr.w	r3, r3, #4
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd (lcd,0x33); 
 80040a6:	2133      	movs	r1, #51	; 0x33
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff feb9 	bl	8003e20 <lcd_send_cmd>
	lcd_send_cmd (lcd,0x32);
 80040ae:	2132      	movs	r1, #50	; 0x32
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff feb5 	bl	8003e20 <lcd_send_cmd>
	HAL_Delay(5);
 80040b6:	2005      	movs	r0, #5
 80040b8:	f7fc ffcc 	bl	8001054 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY); 
 80040bc:	2101      	movs	r1, #1
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f7ff feae 	bl	8003e20 <lcd_send_cmd>
	HAL_Delay(5);
 80040c4:	2005      	movs	r0, #5
 80040c6:	f7fc ffc5 	bl	8001054 <HAL_Delay>
	lcd_send_cmd (lcd,0x0c); 	
 80040ca:	210c      	movs	r1, #12
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f7ff fea7 	bl	8003e20 <lcd_send_cmd>
	HAL_Delay(5);
 80040d2:	2005      	movs	r0, #5
 80040d4:	f7fc ffbe 	bl	8001054 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_RETURNHOME); 
 80040d8:	2102      	movs	r1, #2
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff fea0 	bl	8003e20 <lcd_send_cmd>
	HAL_Delay(5);
 80040e0:	2005      	movs	r0, #5
 80040e2:	f7fc ffb7 	bl	8001054 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_SETDDRAMADDR);
 80040e6:	2180      	movs	r1, #128	; 0x80
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7ff fe99 	bl	8003e20 <lcd_send_cmd>
	lcd_set_cursor_blink_off(lcd);
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f7ff ff74 	bl	8003fdc <lcd_set_cursor_blink_off>
	lcd->Backlightval = LCD_BACKLIGHT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2208      	movs	r2, #8
 80040f8:	725a      	strb	r2, [r3, #9]
}
 80040fa:	bf00      	nop
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <Decimal2BCD>:
#include "rtc.h"

extern I2C_HandleTypeDef hi2c1;

uint8_t Decimal2BCD(uint8_t num)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	71fb      	strb	r3, [r7, #7]
  return (num/10)<<4|(num%10);
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	4a0d      	ldr	r2, [pc, #52]	; (8004148 <Decimal2BCD+0x44>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	08db      	lsrs	r3, r3, #3
 8004118:	b2db      	uxtb	r3, r3
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	b258      	sxtb	r0, r3
 800411e:	79fa      	ldrb	r2, [r7, #7]
 8004120:	4b09      	ldr	r3, [pc, #36]	; (8004148 <Decimal2BCD+0x44>)
 8004122:	fba3 1302 	umull	r1, r3, r3, r2
 8004126:	08d9      	lsrs	r1, r3, #3
 8004128:	460b      	mov	r3, r1
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	b2db      	uxtb	r3, r3
 8004134:	b25b      	sxtb	r3, r3
 8004136:	4303      	orrs	r3, r0
 8004138:	b25b      	sxtb	r3, r3
 800413a:	b2db      	uxtb	r3, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	cccccccd 	.word	0xcccccccd

0800414c <BCD2Decimal>:

uint8_t BCD2Decimal(uint8_t num)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	71fb      	strb	r3, [r7, #7]
 return (num>>4)*10+(num&0x0F);
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	0092      	lsls	r2, r2, #2
 8004160:	4413      	add	r3, r2
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	b2da      	uxtb	r2, r3
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	b2db      	uxtb	r3, r3
 800416e:	4413      	add	r3, r2
 8004170:	b2db      	uxtb	r3, r3
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <RTC_ReadTime>:

void RTC_ReadTime (RTC_Typedef *rtc, DateTime *dt)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af02      	add	r7, sp, #8
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
	uint8_t buff[7];
	uint8_t addr_reg = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(rtc->rtc, RTC_ADDR, &addr_reg, 1, 300);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	f107 020f 	add.w	r2, r7, #15
 8004192:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	2301      	movs	r3, #1
 800419a:	21d0      	movs	r1, #208	; 0xd0
 800419c:	f7fd fb6c 	bl	8001878 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(rtc->rtc, RTC_ADDR, buff, 7, 300);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	f107 0210 	add.w	r2, r7, #16
 80041a8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2307      	movs	r3, #7
 80041b0:	21d0      	movs	r1, #208	; 0xd0
 80041b2:	f7fd fc5f 	bl	8001a74 <HAL_I2C_Master_Receive>
	dt->sec = BCD2Decimal(buff[0]);
 80041b6:	7c3b      	ldrb	r3, [r7, #16]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff ffc7 	bl	800414c <BCD2Decimal>
 80041be:	4603      	mov	r3, r0
 80041c0:	461a      	mov	r2, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	701a      	strb	r2, [r3, #0]
	dt->min = BCD2Decimal(buff[1]);
 80041c6:	7c7b      	ldrb	r3, [r7, #17]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ffbf 	bl	800414c <BCD2Decimal>
 80041ce:	4603      	mov	r3, r0
 80041d0:	461a      	mov	r2, r3
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	705a      	strb	r2, [r3, #1]
	dt->hour = BCD2Decimal(buff[2]);
 80041d6:	7cbb      	ldrb	r3, [r7, #18]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff ffb7 	bl	800414c <BCD2Decimal>
 80041de:	4603      	mov	r3, r0
 80041e0:	461a      	mov	r2, r3
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	709a      	strb	r2, [r3, #2]
	dt->day = BCD2Decimal(buff[3]);
 80041e6:	7cfb      	ldrb	r3, [r7, #19]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff ffaf 	bl	800414c <BCD2Decimal>
 80041ee:	4603      	mov	r3, r0
 80041f0:	461a      	mov	r2, r3
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	711a      	strb	r2, [r3, #4]
	dt->date = BCD2Decimal(buff[4]);
 80041f6:	7d3b      	ldrb	r3, [r7, #20]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff ffa7 	bl	800414c <BCD2Decimal>
 80041fe:	4603      	mov	r3, r0
 8004200:	461a      	mov	r2, r3
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	70da      	strb	r2, [r3, #3]
	dt->month = BCD2Decimal(buff[5]);
 8004206:	7d7b      	ldrb	r3, [r7, #21]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff ff9f 	bl	800414c <BCD2Decimal>
 800420e:	4603      	mov	r3, r0
 8004210:	461a      	mov	r2, r3
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	715a      	strb	r2, [r3, #5]
	dt->year = BCD2Decimal(buff[6]);
 8004216:	7dbb      	ldrb	r3, [r7, #22]
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff ff97 	bl	800414c <BCD2Decimal>
 800421e:	4603      	mov	r3, r0
 8004220:	461a      	mov	r2, r3
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	719a      	strb	r2, [r3, #6]

}
 8004226:	bf00      	nop
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <RTC_WriteTime>:

void RTC_WriteTime(RTC_Typedef *rtc, DateTime *dt)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b086      	sub	sp, #24
 8004232:	af02      	add	r7, sp, #8
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
	uint8_t buff[8];
	buff[0] = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	723b      	strb	r3, [r7, #8]
	buff[1] = Decimal2BCD(dt->sec);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff5f 	bl	8004104 <Decimal2BCD>
 8004246:	4603      	mov	r3, r0
 8004248:	727b      	strb	r3, [r7, #9]
	buff[2] = Decimal2BCD(dt->min);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	785b      	ldrb	r3, [r3, #1]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff ff58 	bl	8004104 <Decimal2BCD>
 8004254:	4603      	mov	r3, r0
 8004256:	72bb      	strb	r3, [r7, #10]
	buff[3] = Decimal2BCD(dt->hour);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	789b      	ldrb	r3, [r3, #2]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ff51 	bl	8004104 <Decimal2BCD>
 8004262:	4603      	mov	r3, r0
 8004264:	72fb      	strb	r3, [r7, #11]
	buff[4] = Decimal2BCD(dt->day);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	791b      	ldrb	r3, [r3, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ff4a 	bl	8004104 <Decimal2BCD>
 8004270:	4603      	mov	r3, r0
 8004272:	733b      	strb	r3, [r7, #12]
	buff[5] = Decimal2BCD(dt->date);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	78db      	ldrb	r3, [r3, #3]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff ff43 	bl	8004104 <Decimal2BCD>
 800427e:	4603      	mov	r3, r0
 8004280:	737b      	strb	r3, [r7, #13]
	buff[6] = Decimal2BCD(dt->month);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	795b      	ldrb	r3, [r3, #5]
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff ff3c 	bl	8004104 <Decimal2BCD>
 800428c:	4603      	mov	r3, r0
 800428e:	73bb      	strb	r3, [r7, #14]
	buff[7] = Decimal2BCD(dt->year);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	799b      	ldrb	r3, [r3, #6]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff35 	bl	8004104 <Decimal2BCD>
 800429a:	4603      	mov	r3, r0
 800429c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(rtc->rtc,RTC_ADDR,buff,8,100);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	f107 0208 	add.w	r2, r7, #8
 80042a6:	2364      	movs	r3, #100	; 0x64
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	2308      	movs	r3, #8
 80042ac:	21d0      	movs	r1, #208	; 0xd0
 80042ae:	f7fd fae3 	bl	8001878 <HAL_I2C_Master_Transmit>
}
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <RTC_Init>:
void RTC_Init (RTC_Typedef *rtc,I2C_HandleTypeDef *i2c, DateTime *dt)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
	rtc->rtc = i2c;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	601a      	str	r2, [r3, #0]
	rtc->time = dt;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	605a      	str	r2, [r3, #4]
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <_vsiprintf_r>:
 80042dc:	b500      	push	{lr}
 80042de:	b09b      	sub	sp, #108	; 0x6c
 80042e0:	9100      	str	r1, [sp, #0]
 80042e2:	9104      	str	r1, [sp, #16]
 80042e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042e8:	9105      	str	r1, [sp, #20]
 80042ea:	9102      	str	r1, [sp, #8]
 80042ec:	4905      	ldr	r1, [pc, #20]	; (8004304 <_vsiprintf_r+0x28>)
 80042ee:	9103      	str	r1, [sp, #12]
 80042f0:	4669      	mov	r1, sp
 80042f2:	f000 f995 	bl	8004620 <_svfiprintf_r>
 80042f6:	2200      	movs	r2, #0
 80042f8:	9b00      	ldr	r3, [sp, #0]
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	b01b      	add	sp, #108	; 0x6c
 80042fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8004302:	bf00      	nop
 8004304:	ffff0208 	.word	0xffff0208

08004308 <vsiprintf>:
 8004308:	4613      	mov	r3, r2
 800430a:	460a      	mov	r2, r1
 800430c:	4601      	mov	r1, r0
 800430e:	4802      	ldr	r0, [pc, #8]	; (8004318 <vsiprintf+0x10>)
 8004310:	6800      	ldr	r0, [r0, #0]
 8004312:	f7ff bfe3 	b.w	80042dc <_vsiprintf_r>
 8004316:	bf00      	nop
 8004318:	20000068 	.word	0x20000068

0800431c <memset>:
 800431c:	4603      	mov	r3, r0
 800431e:	4402      	add	r2, r0
 8004320:	4293      	cmp	r3, r2
 8004322:	d100      	bne.n	8004326 <memset+0xa>
 8004324:	4770      	bx	lr
 8004326:	f803 1b01 	strb.w	r1, [r3], #1
 800432a:	e7f9      	b.n	8004320 <memset+0x4>

0800432c <__errno>:
 800432c:	4b01      	ldr	r3, [pc, #4]	; (8004334 <__errno+0x8>)
 800432e:	6818      	ldr	r0, [r3, #0]
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20000068 	.word	0x20000068

08004338 <__libc_init_array>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	2600      	movs	r6, #0
 800433c:	4d0c      	ldr	r5, [pc, #48]	; (8004370 <__libc_init_array+0x38>)
 800433e:	4c0d      	ldr	r4, [pc, #52]	; (8004374 <__libc_init_array+0x3c>)
 8004340:	1b64      	subs	r4, r4, r5
 8004342:	10a4      	asrs	r4, r4, #2
 8004344:	42a6      	cmp	r6, r4
 8004346:	d109      	bne.n	800435c <__libc_init_array+0x24>
 8004348:	f000 fc7a 	bl	8004c40 <_init>
 800434c:	2600      	movs	r6, #0
 800434e:	4d0a      	ldr	r5, [pc, #40]	; (8004378 <__libc_init_array+0x40>)
 8004350:	4c0a      	ldr	r4, [pc, #40]	; (800437c <__libc_init_array+0x44>)
 8004352:	1b64      	subs	r4, r4, r5
 8004354:	10a4      	asrs	r4, r4, #2
 8004356:	42a6      	cmp	r6, r4
 8004358:	d105      	bne.n	8004366 <__libc_init_array+0x2e>
 800435a:	bd70      	pop	{r4, r5, r6, pc}
 800435c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004360:	4798      	blx	r3
 8004362:	3601      	adds	r6, #1
 8004364:	e7ee      	b.n	8004344 <__libc_init_array+0xc>
 8004366:	f855 3b04 	ldr.w	r3, [r5], #4
 800436a:	4798      	blx	r3
 800436c:	3601      	adds	r6, #1
 800436e:	e7f2      	b.n	8004356 <__libc_init_array+0x1e>
 8004370:	08004d34 	.word	0x08004d34
 8004374:	08004d34 	.word	0x08004d34
 8004378:	08004d34 	.word	0x08004d34
 800437c:	08004d38 	.word	0x08004d38

08004380 <__retarget_lock_acquire_recursive>:
 8004380:	4770      	bx	lr

08004382 <__retarget_lock_release_recursive>:
 8004382:	4770      	bx	lr

08004384 <_free_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4605      	mov	r5, r0
 8004388:	2900      	cmp	r1, #0
 800438a:	d040      	beq.n	800440e <_free_r+0x8a>
 800438c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004390:	1f0c      	subs	r4, r1, #4
 8004392:	2b00      	cmp	r3, #0
 8004394:	bfb8      	it	lt
 8004396:	18e4      	addlt	r4, r4, r3
 8004398:	f000 f8dc 	bl	8004554 <__malloc_lock>
 800439c:	4a1c      	ldr	r2, [pc, #112]	; (8004410 <_free_r+0x8c>)
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	b933      	cbnz	r3, 80043b0 <_free_r+0x2c>
 80043a2:	6063      	str	r3, [r4, #4]
 80043a4:	6014      	str	r4, [r2, #0]
 80043a6:	4628      	mov	r0, r5
 80043a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043ac:	f000 b8d8 	b.w	8004560 <__malloc_unlock>
 80043b0:	42a3      	cmp	r3, r4
 80043b2:	d908      	bls.n	80043c6 <_free_r+0x42>
 80043b4:	6820      	ldr	r0, [r4, #0]
 80043b6:	1821      	adds	r1, r4, r0
 80043b8:	428b      	cmp	r3, r1
 80043ba:	bf01      	itttt	eq
 80043bc:	6819      	ldreq	r1, [r3, #0]
 80043be:	685b      	ldreq	r3, [r3, #4]
 80043c0:	1809      	addeq	r1, r1, r0
 80043c2:	6021      	streq	r1, [r4, #0]
 80043c4:	e7ed      	b.n	80043a2 <_free_r+0x1e>
 80043c6:	461a      	mov	r2, r3
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	b10b      	cbz	r3, 80043d0 <_free_r+0x4c>
 80043cc:	42a3      	cmp	r3, r4
 80043ce:	d9fa      	bls.n	80043c6 <_free_r+0x42>
 80043d0:	6811      	ldr	r1, [r2, #0]
 80043d2:	1850      	adds	r0, r2, r1
 80043d4:	42a0      	cmp	r0, r4
 80043d6:	d10b      	bne.n	80043f0 <_free_r+0x6c>
 80043d8:	6820      	ldr	r0, [r4, #0]
 80043da:	4401      	add	r1, r0
 80043dc:	1850      	adds	r0, r2, r1
 80043de:	4283      	cmp	r3, r0
 80043e0:	6011      	str	r1, [r2, #0]
 80043e2:	d1e0      	bne.n	80043a6 <_free_r+0x22>
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4408      	add	r0, r1
 80043ea:	6010      	str	r0, [r2, #0]
 80043ec:	6053      	str	r3, [r2, #4]
 80043ee:	e7da      	b.n	80043a6 <_free_r+0x22>
 80043f0:	d902      	bls.n	80043f8 <_free_r+0x74>
 80043f2:	230c      	movs	r3, #12
 80043f4:	602b      	str	r3, [r5, #0]
 80043f6:	e7d6      	b.n	80043a6 <_free_r+0x22>
 80043f8:	6820      	ldr	r0, [r4, #0]
 80043fa:	1821      	adds	r1, r4, r0
 80043fc:	428b      	cmp	r3, r1
 80043fe:	bf01      	itttt	eq
 8004400:	6819      	ldreq	r1, [r3, #0]
 8004402:	685b      	ldreq	r3, [r3, #4]
 8004404:	1809      	addeq	r1, r1, r0
 8004406:	6021      	streq	r1, [r4, #0]
 8004408:	6063      	str	r3, [r4, #4]
 800440a:	6054      	str	r4, [r2, #4]
 800440c:	e7cb      	b.n	80043a6 <_free_r+0x22>
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	20000334 	.word	0x20000334

08004414 <sbrk_aligned>:
 8004414:	b570      	push	{r4, r5, r6, lr}
 8004416:	4e0e      	ldr	r6, [pc, #56]	; (8004450 <sbrk_aligned+0x3c>)
 8004418:	460c      	mov	r4, r1
 800441a:	6831      	ldr	r1, [r6, #0]
 800441c:	4605      	mov	r5, r0
 800441e:	b911      	cbnz	r1, 8004426 <sbrk_aligned+0x12>
 8004420:	f000 fbaa 	bl	8004b78 <_sbrk_r>
 8004424:	6030      	str	r0, [r6, #0]
 8004426:	4621      	mov	r1, r4
 8004428:	4628      	mov	r0, r5
 800442a:	f000 fba5 	bl	8004b78 <_sbrk_r>
 800442e:	1c43      	adds	r3, r0, #1
 8004430:	d00a      	beq.n	8004448 <sbrk_aligned+0x34>
 8004432:	1cc4      	adds	r4, r0, #3
 8004434:	f024 0403 	bic.w	r4, r4, #3
 8004438:	42a0      	cmp	r0, r4
 800443a:	d007      	beq.n	800444c <sbrk_aligned+0x38>
 800443c:	1a21      	subs	r1, r4, r0
 800443e:	4628      	mov	r0, r5
 8004440:	f000 fb9a 	bl	8004b78 <_sbrk_r>
 8004444:	3001      	adds	r0, #1
 8004446:	d101      	bne.n	800444c <sbrk_aligned+0x38>
 8004448:	f04f 34ff 	mov.w	r4, #4294967295
 800444c:	4620      	mov	r0, r4
 800444e:	bd70      	pop	{r4, r5, r6, pc}
 8004450:	20000338 	.word	0x20000338

08004454 <_malloc_r>:
 8004454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004458:	1ccd      	adds	r5, r1, #3
 800445a:	f025 0503 	bic.w	r5, r5, #3
 800445e:	3508      	adds	r5, #8
 8004460:	2d0c      	cmp	r5, #12
 8004462:	bf38      	it	cc
 8004464:	250c      	movcc	r5, #12
 8004466:	2d00      	cmp	r5, #0
 8004468:	4607      	mov	r7, r0
 800446a:	db01      	blt.n	8004470 <_malloc_r+0x1c>
 800446c:	42a9      	cmp	r1, r5
 800446e:	d905      	bls.n	800447c <_malloc_r+0x28>
 8004470:	230c      	movs	r3, #12
 8004472:	2600      	movs	r6, #0
 8004474:	603b      	str	r3, [r7, #0]
 8004476:	4630      	mov	r0, r6
 8004478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800447c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004550 <_malloc_r+0xfc>
 8004480:	f000 f868 	bl	8004554 <__malloc_lock>
 8004484:	f8d8 3000 	ldr.w	r3, [r8]
 8004488:	461c      	mov	r4, r3
 800448a:	bb5c      	cbnz	r4, 80044e4 <_malloc_r+0x90>
 800448c:	4629      	mov	r1, r5
 800448e:	4638      	mov	r0, r7
 8004490:	f7ff ffc0 	bl	8004414 <sbrk_aligned>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	4604      	mov	r4, r0
 8004498:	d155      	bne.n	8004546 <_malloc_r+0xf2>
 800449a:	f8d8 4000 	ldr.w	r4, [r8]
 800449e:	4626      	mov	r6, r4
 80044a0:	2e00      	cmp	r6, #0
 80044a2:	d145      	bne.n	8004530 <_malloc_r+0xdc>
 80044a4:	2c00      	cmp	r4, #0
 80044a6:	d048      	beq.n	800453a <_malloc_r+0xe6>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	4631      	mov	r1, r6
 80044ac:	4638      	mov	r0, r7
 80044ae:	eb04 0903 	add.w	r9, r4, r3
 80044b2:	f000 fb61 	bl	8004b78 <_sbrk_r>
 80044b6:	4581      	cmp	r9, r0
 80044b8:	d13f      	bne.n	800453a <_malloc_r+0xe6>
 80044ba:	6821      	ldr	r1, [r4, #0]
 80044bc:	4638      	mov	r0, r7
 80044be:	1a6d      	subs	r5, r5, r1
 80044c0:	4629      	mov	r1, r5
 80044c2:	f7ff ffa7 	bl	8004414 <sbrk_aligned>
 80044c6:	3001      	adds	r0, #1
 80044c8:	d037      	beq.n	800453a <_malloc_r+0xe6>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	442b      	add	r3, r5
 80044ce:	6023      	str	r3, [r4, #0]
 80044d0:	f8d8 3000 	ldr.w	r3, [r8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d038      	beq.n	800454a <_malloc_r+0xf6>
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	42a2      	cmp	r2, r4
 80044dc:	d12b      	bne.n	8004536 <_malloc_r+0xe2>
 80044de:	2200      	movs	r2, #0
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	e00f      	b.n	8004504 <_malloc_r+0xb0>
 80044e4:	6822      	ldr	r2, [r4, #0]
 80044e6:	1b52      	subs	r2, r2, r5
 80044e8:	d41f      	bmi.n	800452a <_malloc_r+0xd6>
 80044ea:	2a0b      	cmp	r2, #11
 80044ec:	d917      	bls.n	800451e <_malloc_r+0xca>
 80044ee:	1961      	adds	r1, r4, r5
 80044f0:	42a3      	cmp	r3, r4
 80044f2:	6025      	str	r5, [r4, #0]
 80044f4:	bf18      	it	ne
 80044f6:	6059      	strne	r1, [r3, #4]
 80044f8:	6863      	ldr	r3, [r4, #4]
 80044fa:	bf08      	it	eq
 80044fc:	f8c8 1000 	streq.w	r1, [r8]
 8004500:	5162      	str	r2, [r4, r5]
 8004502:	604b      	str	r3, [r1, #4]
 8004504:	4638      	mov	r0, r7
 8004506:	f104 060b 	add.w	r6, r4, #11
 800450a:	f000 f829 	bl	8004560 <__malloc_unlock>
 800450e:	f026 0607 	bic.w	r6, r6, #7
 8004512:	1d23      	adds	r3, r4, #4
 8004514:	1af2      	subs	r2, r6, r3
 8004516:	d0ae      	beq.n	8004476 <_malloc_r+0x22>
 8004518:	1b9b      	subs	r3, r3, r6
 800451a:	50a3      	str	r3, [r4, r2]
 800451c:	e7ab      	b.n	8004476 <_malloc_r+0x22>
 800451e:	42a3      	cmp	r3, r4
 8004520:	6862      	ldr	r2, [r4, #4]
 8004522:	d1dd      	bne.n	80044e0 <_malloc_r+0x8c>
 8004524:	f8c8 2000 	str.w	r2, [r8]
 8004528:	e7ec      	b.n	8004504 <_malloc_r+0xb0>
 800452a:	4623      	mov	r3, r4
 800452c:	6864      	ldr	r4, [r4, #4]
 800452e:	e7ac      	b.n	800448a <_malloc_r+0x36>
 8004530:	4634      	mov	r4, r6
 8004532:	6876      	ldr	r6, [r6, #4]
 8004534:	e7b4      	b.n	80044a0 <_malloc_r+0x4c>
 8004536:	4613      	mov	r3, r2
 8004538:	e7cc      	b.n	80044d4 <_malloc_r+0x80>
 800453a:	230c      	movs	r3, #12
 800453c:	4638      	mov	r0, r7
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	f000 f80e 	bl	8004560 <__malloc_unlock>
 8004544:	e797      	b.n	8004476 <_malloc_r+0x22>
 8004546:	6025      	str	r5, [r4, #0]
 8004548:	e7dc      	b.n	8004504 <_malloc_r+0xb0>
 800454a:	605b      	str	r3, [r3, #4]
 800454c:	deff      	udf	#255	; 0xff
 800454e:	bf00      	nop
 8004550:	20000334 	.word	0x20000334

08004554 <__malloc_lock>:
 8004554:	4801      	ldr	r0, [pc, #4]	; (800455c <__malloc_lock+0x8>)
 8004556:	f7ff bf13 	b.w	8004380 <__retarget_lock_acquire_recursive>
 800455a:	bf00      	nop
 800455c:	20000330 	.word	0x20000330

08004560 <__malloc_unlock>:
 8004560:	4801      	ldr	r0, [pc, #4]	; (8004568 <__malloc_unlock+0x8>)
 8004562:	f7ff bf0e 	b.w	8004382 <__retarget_lock_release_recursive>
 8004566:	bf00      	nop
 8004568:	20000330 	.word	0x20000330

0800456c <__ssputs_r>:
 800456c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004570:	461f      	mov	r7, r3
 8004572:	688e      	ldr	r6, [r1, #8]
 8004574:	4682      	mov	sl, r0
 8004576:	42be      	cmp	r6, r7
 8004578:	460c      	mov	r4, r1
 800457a:	4690      	mov	r8, r2
 800457c:	680b      	ldr	r3, [r1, #0]
 800457e:	d82c      	bhi.n	80045da <__ssputs_r+0x6e>
 8004580:	898a      	ldrh	r2, [r1, #12]
 8004582:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004586:	d026      	beq.n	80045d6 <__ssputs_r+0x6a>
 8004588:	6965      	ldr	r5, [r4, #20]
 800458a:	6909      	ldr	r1, [r1, #16]
 800458c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004590:	eba3 0901 	sub.w	r9, r3, r1
 8004594:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004598:	1c7b      	adds	r3, r7, #1
 800459a:	444b      	add	r3, r9
 800459c:	106d      	asrs	r5, r5, #1
 800459e:	429d      	cmp	r5, r3
 80045a0:	bf38      	it	cc
 80045a2:	461d      	movcc	r5, r3
 80045a4:	0553      	lsls	r3, r2, #21
 80045a6:	d527      	bpl.n	80045f8 <__ssputs_r+0x8c>
 80045a8:	4629      	mov	r1, r5
 80045aa:	f7ff ff53 	bl	8004454 <_malloc_r>
 80045ae:	4606      	mov	r6, r0
 80045b0:	b360      	cbz	r0, 800460c <__ssputs_r+0xa0>
 80045b2:	464a      	mov	r2, r9
 80045b4:	6921      	ldr	r1, [r4, #16]
 80045b6:	f000 fafd 	bl	8004bb4 <memcpy>
 80045ba:	89a3      	ldrh	r3, [r4, #12]
 80045bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c4:	81a3      	strh	r3, [r4, #12]
 80045c6:	6126      	str	r6, [r4, #16]
 80045c8:	444e      	add	r6, r9
 80045ca:	6026      	str	r6, [r4, #0]
 80045cc:	463e      	mov	r6, r7
 80045ce:	6165      	str	r5, [r4, #20]
 80045d0:	eba5 0509 	sub.w	r5, r5, r9
 80045d4:	60a5      	str	r5, [r4, #8]
 80045d6:	42be      	cmp	r6, r7
 80045d8:	d900      	bls.n	80045dc <__ssputs_r+0x70>
 80045da:	463e      	mov	r6, r7
 80045dc:	4632      	mov	r2, r6
 80045de:	4641      	mov	r1, r8
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	f000 faaf 	bl	8004b44 <memmove>
 80045e6:	2000      	movs	r0, #0
 80045e8:	68a3      	ldr	r3, [r4, #8]
 80045ea:	1b9b      	subs	r3, r3, r6
 80045ec:	60a3      	str	r3, [r4, #8]
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	4433      	add	r3, r6
 80045f2:	6023      	str	r3, [r4, #0]
 80045f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f8:	462a      	mov	r2, r5
 80045fa:	f000 fae9 	bl	8004bd0 <_realloc_r>
 80045fe:	4606      	mov	r6, r0
 8004600:	2800      	cmp	r0, #0
 8004602:	d1e0      	bne.n	80045c6 <__ssputs_r+0x5a>
 8004604:	4650      	mov	r0, sl
 8004606:	6921      	ldr	r1, [r4, #16]
 8004608:	f7ff febc 	bl	8004384 <_free_r>
 800460c:	230c      	movs	r3, #12
 800460e:	f8ca 3000 	str.w	r3, [sl]
 8004612:	89a3      	ldrh	r3, [r4, #12]
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
 8004618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800461c:	81a3      	strh	r3, [r4, #12]
 800461e:	e7e9      	b.n	80045f4 <__ssputs_r+0x88>

08004620 <_svfiprintf_r>:
 8004620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004624:	4698      	mov	r8, r3
 8004626:	898b      	ldrh	r3, [r1, #12]
 8004628:	4607      	mov	r7, r0
 800462a:	061b      	lsls	r3, r3, #24
 800462c:	460d      	mov	r5, r1
 800462e:	4614      	mov	r4, r2
 8004630:	b09d      	sub	sp, #116	; 0x74
 8004632:	d50e      	bpl.n	8004652 <_svfiprintf_r+0x32>
 8004634:	690b      	ldr	r3, [r1, #16]
 8004636:	b963      	cbnz	r3, 8004652 <_svfiprintf_r+0x32>
 8004638:	2140      	movs	r1, #64	; 0x40
 800463a:	f7ff ff0b 	bl	8004454 <_malloc_r>
 800463e:	6028      	str	r0, [r5, #0]
 8004640:	6128      	str	r0, [r5, #16]
 8004642:	b920      	cbnz	r0, 800464e <_svfiprintf_r+0x2e>
 8004644:	230c      	movs	r3, #12
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	f04f 30ff 	mov.w	r0, #4294967295
 800464c:	e0d0      	b.n	80047f0 <_svfiprintf_r+0x1d0>
 800464e:	2340      	movs	r3, #64	; 0x40
 8004650:	616b      	str	r3, [r5, #20]
 8004652:	2300      	movs	r3, #0
 8004654:	9309      	str	r3, [sp, #36]	; 0x24
 8004656:	2320      	movs	r3, #32
 8004658:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800465c:	2330      	movs	r3, #48	; 0x30
 800465e:	f04f 0901 	mov.w	r9, #1
 8004662:	f8cd 800c 	str.w	r8, [sp, #12]
 8004666:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004808 <_svfiprintf_r+0x1e8>
 800466a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800466e:	4623      	mov	r3, r4
 8004670:	469a      	mov	sl, r3
 8004672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004676:	b10a      	cbz	r2, 800467c <_svfiprintf_r+0x5c>
 8004678:	2a25      	cmp	r2, #37	; 0x25
 800467a:	d1f9      	bne.n	8004670 <_svfiprintf_r+0x50>
 800467c:	ebba 0b04 	subs.w	fp, sl, r4
 8004680:	d00b      	beq.n	800469a <_svfiprintf_r+0x7a>
 8004682:	465b      	mov	r3, fp
 8004684:	4622      	mov	r2, r4
 8004686:	4629      	mov	r1, r5
 8004688:	4638      	mov	r0, r7
 800468a:	f7ff ff6f 	bl	800456c <__ssputs_r>
 800468e:	3001      	adds	r0, #1
 8004690:	f000 80a9 	beq.w	80047e6 <_svfiprintf_r+0x1c6>
 8004694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004696:	445a      	add	r2, fp
 8004698:	9209      	str	r2, [sp, #36]	; 0x24
 800469a:	f89a 3000 	ldrb.w	r3, [sl]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80a1 	beq.w	80047e6 <_svfiprintf_r+0x1c6>
 80046a4:	2300      	movs	r3, #0
 80046a6:	f04f 32ff 	mov.w	r2, #4294967295
 80046aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046ae:	f10a 0a01 	add.w	sl, sl, #1
 80046b2:	9304      	str	r3, [sp, #16]
 80046b4:	9307      	str	r3, [sp, #28]
 80046b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046ba:	931a      	str	r3, [sp, #104]	; 0x68
 80046bc:	4654      	mov	r4, sl
 80046be:	2205      	movs	r2, #5
 80046c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046c4:	4850      	ldr	r0, [pc, #320]	; (8004808 <_svfiprintf_r+0x1e8>)
 80046c6:	f000 fa67 	bl	8004b98 <memchr>
 80046ca:	9a04      	ldr	r2, [sp, #16]
 80046cc:	b9d8      	cbnz	r0, 8004706 <_svfiprintf_r+0xe6>
 80046ce:	06d0      	lsls	r0, r2, #27
 80046d0:	bf44      	itt	mi
 80046d2:	2320      	movmi	r3, #32
 80046d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046d8:	0711      	lsls	r1, r2, #28
 80046da:	bf44      	itt	mi
 80046dc:	232b      	movmi	r3, #43	; 0x2b
 80046de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046e2:	f89a 3000 	ldrb.w	r3, [sl]
 80046e6:	2b2a      	cmp	r3, #42	; 0x2a
 80046e8:	d015      	beq.n	8004716 <_svfiprintf_r+0xf6>
 80046ea:	4654      	mov	r4, sl
 80046ec:	2000      	movs	r0, #0
 80046ee:	f04f 0c0a 	mov.w	ip, #10
 80046f2:	9a07      	ldr	r2, [sp, #28]
 80046f4:	4621      	mov	r1, r4
 80046f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046fa:	3b30      	subs	r3, #48	; 0x30
 80046fc:	2b09      	cmp	r3, #9
 80046fe:	d94d      	bls.n	800479c <_svfiprintf_r+0x17c>
 8004700:	b1b0      	cbz	r0, 8004730 <_svfiprintf_r+0x110>
 8004702:	9207      	str	r2, [sp, #28]
 8004704:	e014      	b.n	8004730 <_svfiprintf_r+0x110>
 8004706:	eba0 0308 	sub.w	r3, r0, r8
 800470a:	fa09 f303 	lsl.w	r3, r9, r3
 800470e:	4313      	orrs	r3, r2
 8004710:	46a2      	mov	sl, r4
 8004712:	9304      	str	r3, [sp, #16]
 8004714:	e7d2      	b.n	80046bc <_svfiprintf_r+0x9c>
 8004716:	9b03      	ldr	r3, [sp, #12]
 8004718:	1d19      	adds	r1, r3, #4
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	9103      	str	r1, [sp, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	bfbb      	ittet	lt
 8004722:	425b      	neglt	r3, r3
 8004724:	f042 0202 	orrlt.w	r2, r2, #2
 8004728:	9307      	strge	r3, [sp, #28]
 800472a:	9307      	strlt	r3, [sp, #28]
 800472c:	bfb8      	it	lt
 800472e:	9204      	strlt	r2, [sp, #16]
 8004730:	7823      	ldrb	r3, [r4, #0]
 8004732:	2b2e      	cmp	r3, #46	; 0x2e
 8004734:	d10c      	bne.n	8004750 <_svfiprintf_r+0x130>
 8004736:	7863      	ldrb	r3, [r4, #1]
 8004738:	2b2a      	cmp	r3, #42	; 0x2a
 800473a:	d134      	bne.n	80047a6 <_svfiprintf_r+0x186>
 800473c:	9b03      	ldr	r3, [sp, #12]
 800473e:	3402      	adds	r4, #2
 8004740:	1d1a      	adds	r2, r3, #4
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	9203      	str	r2, [sp, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	bfb8      	it	lt
 800474a:	f04f 33ff 	movlt.w	r3, #4294967295
 800474e:	9305      	str	r3, [sp, #20]
 8004750:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800480c <_svfiprintf_r+0x1ec>
 8004754:	2203      	movs	r2, #3
 8004756:	4650      	mov	r0, sl
 8004758:	7821      	ldrb	r1, [r4, #0]
 800475a:	f000 fa1d 	bl	8004b98 <memchr>
 800475e:	b138      	cbz	r0, 8004770 <_svfiprintf_r+0x150>
 8004760:	2240      	movs	r2, #64	; 0x40
 8004762:	9b04      	ldr	r3, [sp, #16]
 8004764:	eba0 000a 	sub.w	r0, r0, sl
 8004768:	4082      	lsls	r2, r0
 800476a:	4313      	orrs	r3, r2
 800476c:	3401      	adds	r4, #1
 800476e:	9304      	str	r3, [sp, #16]
 8004770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004774:	2206      	movs	r2, #6
 8004776:	4826      	ldr	r0, [pc, #152]	; (8004810 <_svfiprintf_r+0x1f0>)
 8004778:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800477c:	f000 fa0c 	bl	8004b98 <memchr>
 8004780:	2800      	cmp	r0, #0
 8004782:	d038      	beq.n	80047f6 <_svfiprintf_r+0x1d6>
 8004784:	4b23      	ldr	r3, [pc, #140]	; (8004814 <_svfiprintf_r+0x1f4>)
 8004786:	bb1b      	cbnz	r3, 80047d0 <_svfiprintf_r+0x1b0>
 8004788:	9b03      	ldr	r3, [sp, #12]
 800478a:	3307      	adds	r3, #7
 800478c:	f023 0307 	bic.w	r3, r3, #7
 8004790:	3308      	adds	r3, #8
 8004792:	9303      	str	r3, [sp, #12]
 8004794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004796:	4433      	add	r3, r6
 8004798:	9309      	str	r3, [sp, #36]	; 0x24
 800479a:	e768      	b.n	800466e <_svfiprintf_r+0x4e>
 800479c:	460c      	mov	r4, r1
 800479e:	2001      	movs	r0, #1
 80047a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80047a4:	e7a6      	b.n	80046f4 <_svfiprintf_r+0xd4>
 80047a6:	2300      	movs	r3, #0
 80047a8:	f04f 0c0a 	mov.w	ip, #10
 80047ac:	4619      	mov	r1, r3
 80047ae:	3401      	adds	r4, #1
 80047b0:	9305      	str	r3, [sp, #20]
 80047b2:	4620      	mov	r0, r4
 80047b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047b8:	3a30      	subs	r2, #48	; 0x30
 80047ba:	2a09      	cmp	r2, #9
 80047bc:	d903      	bls.n	80047c6 <_svfiprintf_r+0x1a6>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0c6      	beq.n	8004750 <_svfiprintf_r+0x130>
 80047c2:	9105      	str	r1, [sp, #20]
 80047c4:	e7c4      	b.n	8004750 <_svfiprintf_r+0x130>
 80047c6:	4604      	mov	r4, r0
 80047c8:	2301      	movs	r3, #1
 80047ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80047ce:	e7f0      	b.n	80047b2 <_svfiprintf_r+0x192>
 80047d0:	ab03      	add	r3, sp, #12
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	462a      	mov	r2, r5
 80047d6:	4638      	mov	r0, r7
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <_svfiprintf_r+0x1f8>)
 80047da:	a904      	add	r1, sp, #16
 80047dc:	f3af 8000 	nop.w
 80047e0:	1c42      	adds	r2, r0, #1
 80047e2:	4606      	mov	r6, r0
 80047e4:	d1d6      	bne.n	8004794 <_svfiprintf_r+0x174>
 80047e6:	89ab      	ldrh	r3, [r5, #12]
 80047e8:	065b      	lsls	r3, r3, #25
 80047ea:	f53f af2d 	bmi.w	8004648 <_svfiprintf_r+0x28>
 80047ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047f0:	b01d      	add	sp, #116	; 0x74
 80047f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f6:	ab03      	add	r3, sp, #12
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	462a      	mov	r2, r5
 80047fc:	4638      	mov	r0, r7
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <_svfiprintf_r+0x1f8>)
 8004800:	a904      	add	r1, sp, #16
 8004802:	f000 f87d 	bl	8004900 <_printf_i>
 8004806:	e7eb      	b.n	80047e0 <_svfiprintf_r+0x1c0>
 8004808:	08004cfe 	.word	0x08004cfe
 800480c:	08004d04 	.word	0x08004d04
 8004810:	08004d08 	.word	0x08004d08
 8004814:	00000000 	.word	0x00000000
 8004818:	0800456d 	.word	0x0800456d

0800481c <_printf_common>:
 800481c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004820:	4616      	mov	r6, r2
 8004822:	4699      	mov	r9, r3
 8004824:	688a      	ldr	r2, [r1, #8]
 8004826:	690b      	ldr	r3, [r1, #16]
 8004828:	4607      	mov	r7, r0
 800482a:	4293      	cmp	r3, r2
 800482c:	bfb8      	it	lt
 800482e:	4613      	movlt	r3, r2
 8004830:	6033      	str	r3, [r6, #0]
 8004832:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004836:	460c      	mov	r4, r1
 8004838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800483c:	b10a      	cbz	r2, 8004842 <_printf_common+0x26>
 800483e:	3301      	adds	r3, #1
 8004840:	6033      	str	r3, [r6, #0]
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	0699      	lsls	r1, r3, #26
 8004846:	bf42      	ittt	mi
 8004848:	6833      	ldrmi	r3, [r6, #0]
 800484a:	3302      	addmi	r3, #2
 800484c:	6033      	strmi	r3, [r6, #0]
 800484e:	6825      	ldr	r5, [r4, #0]
 8004850:	f015 0506 	ands.w	r5, r5, #6
 8004854:	d106      	bne.n	8004864 <_printf_common+0x48>
 8004856:	f104 0a19 	add.w	sl, r4, #25
 800485a:	68e3      	ldr	r3, [r4, #12]
 800485c:	6832      	ldr	r2, [r6, #0]
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	42ab      	cmp	r3, r5
 8004862:	dc2b      	bgt.n	80048bc <_printf_common+0xa0>
 8004864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004868:	1e13      	subs	r3, r2, #0
 800486a:	6822      	ldr	r2, [r4, #0]
 800486c:	bf18      	it	ne
 800486e:	2301      	movne	r3, #1
 8004870:	0692      	lsls	r2, r2, #26
 8004872:	d430      	bmi.n	80048d6 <_printf_common+0xba>
 8004874:	4649      	mov	r1, r9
 8004876:	4638      	mov	r0, r7
 8004878:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800487c:	47c0      	blx	r8
 800487e:	3001      	adds	r0, #1
 8004880:	d023      	beq.n	80048ca <_printf_common+0xae>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	6922      	ldr	r2, [r4, #16]
 8004886:	f003 0306 	and.w	r3, r3, #6
 800488a:	2b04      	cmp	r3, #4
 800488c:	bf14      	ite	ne
 800488e:	2500      	movne	r5, #0
 8004890:	6833      	ldreq	r3, [r6, #0]
 8004892:	f04f 0600 	mov.w	r6, #0
 8004896:	bf08      	it	eq
 8004898:	68e5      	ldreq	r5, [r4, #12]
 800489a:	f104 041a 	add.w	r4, r4, #26
 800489e:	bf08      	it	eq
 80048a0:	1aed      	subeq	r5, r5, r3
 80048a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80048a6:	bf08      	it	eq
 80048a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048ac:	4293      	cmp	r3, r2
 80048ae:	bfc4      	itt	gt
 80048b0:	1a9b      	subgt	r3, r3, r2
 80048b2:	18ed      	addgt	r5, r5, r3
 80048b4:	42b5      	cmp	r5, r6
 80048b6:	d11a      	bne.n	80048ee <_printf_common+0xd2>
 80048b8:	2000      	movs	r0, #0
 80048ba:	e008      	b.n	80048ce <_printf_common+0xb2>
 80048bc:	2301      	movs	r3, #1
 80048be:	4652      	mov	r2, sl
 80048c0:	4649      	mov	r1, r9
 80048c2:	4638      	mov	r0, r7
 80048c4:	47c0      	blx	r8
 80048c6:	3001      	adds	r0, #1
 80048c8:	d103      	bne.n	80048d2 <_printf_common+0xb6>
 80048ca:	f04f 30ff 	mov.w	r0, #4294967295
 80048ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d2:	3501      	adds	r5, #1
 80048d4:	e7c1      	b.n	800485a <_printf_common+0x3e>
 80048d6:	2030      	movs	r0, #48	; 0x30
 80048d8:	18e1      	adds	r1, r4, r3
 80048da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048e4:	4422      	add	r2, r4
 80048e6:	3302      	adds	r3, #2
 80048e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048ec:	e7c2      	b.n	8004874 <_printf_common+0x58>
 80048ee:	2301      	movs	r3, #1
 80048f0:	4622      	mov	r2, r4
 80048f2:	4649      	mov	r1, r9
 80048f4:	4638      	mov	r0, r7
 80048f6:	47c0      	blx	r8
 80048f8:	3001      	adds	r0, #1
 80048fa:	d0e6      	beq.n	80048ca <_printf_common+0xae>
 80048fc:	3601      	adds	r6, #1
 80048fe:	e7d9      	b.n	80048b4 <_printf_common+0x98>

08004900 <_printf_i>:
 8004900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004904:	7e0f      	ldrb	r7, [r1, #24]
 8004906:	4691      	mov	r9, r2
 8004908:	2f78      	cmp	r7, #120	; 0x78
 800490a:	4680      	mov	r8, r0
 800490c:	460c      	mov	r4, r1
 800490e:	469a      	mov	sl, r3
 8004910:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004916:	d807      	bhi.n	8004928 <_printf_i+0x28>
 8004918:	2f62      	cmp	r7, #98	; 0x62
 800491a:	d80a      	bhi.n	8004932 <_printf_i+0x32>
 800491c:	2f00      	cmp	r7, #0
 800491e:	f000 80d5 	beq.w	8004acc <_printf_i+0x1cc>
 8004922:	2f58      	cmp	r7, #88	; 0x58
 8004924:	f000 80c1 	beq.w	8004aaa <_printf_i+0x1aa>
 8004928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800492c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004930:	e03a      	b.n	80049a8 <_printf_i+0xa8>
 8004932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004936:	2b15      	cmp	r3, #21
 8004938:	d8f6      	bhi.n	8004928 <_printf_i+0x28>
 800493a:	a101      	add	r1, pc, #4	; (adr r1, 8004940 <_printf_i+0x40>)
 800493c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004940:	08004999 	.word	0x08004999
 8004944:	080049ad 	.word	0x080049ad
 8004948:	08004929 	.word	0x08004929
 800494c:	08004929 	.word	0x08004929
 8004950:	08004929 	.word	0x08004929
 8004954:	08004929 	.word	0x08004929
 8004958:	080049ad 	.word	0x080049ad
 800495c:	08004929 	.word	0x08004929
 8004960:	08004929 	.word	0x08004929
 8004964:	08004929 	.word	0x08004929
 8004968:	08004929 	.word	0x08004929
 800496c:	08004ab3 	.word	0x08004ab3
 8004970:	080049d9 	.word	0x080049d9
 8004974:	08004a6d 	.word	0x08004a6d
 8004978:	08004929 	.word	0x08004929
 800497c:	08004929 	.word	0x08004929
 8004980:	08004ad5 	.word	0x08004ad5
 8004984:	08004929 	.word	0x08004929
 8004988:	080049d9 	.word	0x080049d9
 800498c:	08004929 	.word	0x08004929
 8004990:	08004929 	.word	0x08004929
 8004994:	08004a75 	.word	0x08004a75
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	1d1a      	adds	r2, r3, #4
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	602a      	str	r2, [r5, #0]
 80049a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0a0      	b.n	8004aee <_printf_i+0x1ee>
 80049ac:	6820      	ldr	r0, [r4, #0]
 80049ae:	682b      	ldr	r3, [r5, #0]
 80049b0:	0607      	lsls	r7, r0, #24
 80049b2:	f103 0104 	add.w	r1, r3, #4
 80049b6:	6029      	str	r1, [r5, #0]
 80049b8:	d501      	bpl.n	80049be <_printf_i+0xbe>
 80049ba:	681e      	ldr	r6, [r3, #0]
 80049bc:	e003      	b.n	80049c6 <_printf_i+0xc6>
 80049be:	0646      	lsls	r6, r0, #25
 80049c0:	d5fb      	bpl.n	80049ba <_printf_i+0xba>
 80049c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049c6:	2e00      	cmp	r6, #0
 80049c8:	da03      	bge.n	80049d2 <_printf_i+0xd2>
 80049ca:	232d      	movs	r3, #45	; 0x2d
 80049cc:	4276      	negs	r6, r6
 80049ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d2:	230a      	movs	r3, #10
 80049d4:	4859      	ldr	r0, [pc, #356]	; (8004b3c <_printf_i+0x23c>)
 80049d6:	e012      	b.n	80049fe <_printf_i+0xfe>
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	6820      	ldr	r0, [r4, #0]
 80049dc:	1d19      	adds	r1, r3, #4
 80049de:	6029      	str	r1, [r5, #0]
 80049e0:	0605      	lsls	r5, r0, #24
 80049e2:	d501      	bpl.n	80049e8 <_printf_i+0xe8>
 80049e4:	681e      	ldr	r6, [r3, #0]
 80049e6:	e002      	b.n	80049ee <_printf_i+0xee>
 80049e8:	0641      	lsls	r1, r0, #25
 80049ea:	d5fb      	bpl.n	80049e4 <_printf_i+0xe4>
 80049ec:	881e      	ldrh	r6, [r3, #0]
 80049ee:	2f6f      	cmp	r7, #111	; 0x6f
 80049f0:	bf0c      	ite	eq
 80049f2:	2308      	moveq	r3, #8
 80049f4:	230a      	movne	r3, #10
 80049f6:	4851      	ldr	r0, [pc, #324]	; (8004b3c <_printf_i+0x23c>)
 80049f8:	2100      	movs	r1, #0
 80049fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049fe:	6865      	ldr	r5, [r4, #4]
 8004a00:	2d00      	cmp	r5, #0
 8004a02:	bfa8      	it	ge
 8004a04:	6821      	ldrge	r1, [r4, #0]
 8004a06:	60a5      	str	r5, [r4, #8]
 8004a08:	bfa4      	itt	ge
 8004a0a:	f021 0104 	bicge.w	r1, r1, #4
 8004a0e:	6021      	strge	r1, [r4, #0]
 8004a10:	b90e      	cbnz	r6, 8004a16 <_printf_i+0x116>
 8004a12:	2d00      	cmp	r5, #0
 8004a14:	d04b      	beq.n	8004aae <_printf_i+0x1ae>
 8004a16:	4615      	mov	r5, r2
 8004a18:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a1c:	fb03 6711 	mls	r7, r3, r1, r6
 8004a20:	5dc7      	ldrb	r7, [r0, r7]
 8004a22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a26:	4637      	mov	r7, r6
 8004a28:	42bb      	cmp	r3, r7
 8004a2a:	460e      	mov	r6, r1
 8004a2c:	d9f4      	bls.n	8004a18 <_printf_i+0x118>
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d10b      	bne.n	8004a4a <_printf_i+0x14a>
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	07de      	lsls	r6, r3, #31
 8004a36:	d508      	bpl.n	8004a4a <_printf_i+0x14a>
 8004a38:	6923      	ldr	r3, [r4, #16]
 8004a3a:	6861      	ldr	r1, [r4, #4]
 8004a3c:	4299      	cmp	r1, r3
 8004a3e:	bfde      	ittt	le
 8004a40:	2330      	movle	r3, #48	; 0x30
 8004a42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a4a:	1b52      	subs	r2, r2, r5
 8004a4c:	6122      	str	r2, [r4, #16]
 8004a4e:	464b      	mov	r3, r9
 8004a50:	4621      	mov	r1, r4
 8004a52:	4640      	mov	r0, r8
 8004a54:	f8cd a000 	str.w	sl, [sp]
 8004a58:	aa03      	add	r2, sp, #12
 8004a5a:	f7ff fedf 	bl	800481c <_printf_common>
 8004a5e:	3001      	adds	r0, #1
 8004a60:	d14a      	bne.n	8004af8 <_printf_i+0x1f8>
 8004a62:	f04f 30ff 	mov.w	r0, #4294967295
 8004a66:	b004      	add	sp, #16
 8004a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	f043 0320 	orr.w	r3, r3, #32
 8004a72:	6023      	str	r3, [r4, #0]
 8004a74:	2778      	movs	r7, #120	; 0x78
 8004a76:	4832      	ldr	r0, [pc, #200]	; (8004b40 <_printf_i+0x240>)
 8004a78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	6829      	ldr	r1, [r5, #0]
 8004a80:	061f      	lsls	r7, r3, #24
 8004a82:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a86:	d402      	bmi.n	8004a8e <_printf_i+0x18e>
 8004a88:	065f      	lsls	r7, r3, #25
 8004a8a:	bf48      	it	mi
 8004a8c:	b2b6      	uxthmi	r6, r6
 8004a8e:	07df      	lsls	r7, r3, #31
 8004a90:	bf48      	it	mi
 8004a92:	f043 0320 	orrmi.w	r3, r3, #32
 8004a96:	6029      	str	r1, [r5, #0]
 8004a98:	bf48      	it	mi
 8004a9a:	6023      	strmi	r3, [r4, #0]
 8004a9c:	b91e      	cbnz	r6, 8004aa6 <_printf_i+0x1a6>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	f023 0320 	bic.w	r3, r3, #32
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	2310      	movs	r3, #16
 8004aa8:	e7a6      	b.n	80049f8 <_printf_i+0xf8>
 8004aaa:	4824      	ldr	r0, [pc, #144]	; (8004b3c <_printf_i+0x23c>)
 8004aac:	e7e4      	b.n	8004a78 <_printf_i+0x178>
 8004aae:	4615      	mov	r5, r2
 8004ab0:	e7bd      	b.n	8004a2e <_printf_i+0x12e>
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	6826      	ldr	r6, [r4, #0]
 8004ab6:	1d18      	adds	r0, r3, #4
 8004ab8:	6961      	ldr	r1, [r4, #20]
 8004aba:	6028      	str	r0, [r5, #0]
 8004abc:	0635      	lsls	r5, r6, #24
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	d501      	bpl.n	8004ac6 <_printf_i+0x1c6>
 8004ac2:	6019      	str	r1, [r3, #0]
 8004ac4:	e002      	b.n	8004acc <_printf_i+0x1cc>
 8004ac6:	0670      	lsls	r0, r6, #25
 8004ac8:	d5fb      	bpl.n	8004ac2 <_printf_i+0x1c2>
 8004aca:	8019      	strh	r1, [r3, #0]
 8004acc:	2300      	movs	r3, #0
 8004ace:	4615      	mov	r5, r2
 8004ad0:	6123      	str	r3, [r4, #16]
 8004ad2:	e7bc      	b.n	8004a4e <_printf_i+0x14e>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	1d1a      	adds	r2, r3, #4
 8004ada:	602a      	str	r2, [r5, #0]
 8004adc:	681d      	ldr	r5, [r3, #0]
 8004ade:	6862      	ldr	r2, [r4, #4]
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f000 f859 	bl	8004b98 <memchr>
 8004ae6:	b108      	cbz	r0, 8004aec <_printf_i+0x1ec>
 8004ae8:	1b40      	subs	r0, r0, r5
 8004aea:	6060      	str	r0, [r4, #4]
 8004aec:	6863      	ldr	r3, [r4, #4]
 8004aee:	6123      	str	r3, [r4, #16]
 8004af0:	2300      	movs	r3, #0
 8004af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004af6:	e7aa      	b.n	8004a4e <_printf_i+0x14e>
 8004af8:	462a      	mov	r2, r5
 8004afa:	4649      	mov	r1, r9
 8004afc:	4640      	mov	r0, r8
 8004afe:	6923      	ldr	r3, [r4, #16]
 8004b00:	47d0      	blx	sl
 8004b02:	3001      	adds	r0, #1
 8004b04:	d0ad      	beq.n	8004a62 <_printf_i+0x162>
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	079b      	lsls	r3, r3, #30
 8004b0a:	d413      	bmi.n	8004b34 <_printf_i+0x234>
 8004b0c:	68e0      	ldr	r0, [r4, #12]
 8004b0e:	9b03      	ldr	r3, [sp, #12]
 8004b10:	4298      	cmp	r0, r3
 8004b12:	bfb8      	it	lt
 8004b14:	4618      	movlt	r0, r3
 8004b16:	e7a6      	b.n	8004a66 <_printf_i+0x166>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	4632      	mov	r2, r6
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	4640      	mov	r0, r8
 8004b20:	47d0      	blx	sl
 8004b22:	3001      	adds	r0, #1
 8004b24:	d09d      	beq.n	8004a62 <_printf_i+0x162>
 8004b26:	3501      	adds	r5, #1
 8004b28:	68e3      	ldr	r3, [r4, #12]
 8004b2a:	9903      	ldr	r1, [sp, #12]
 8004b2c:	1a5b      	subs	r3, r3, r1
 8004b2e:	42ab      	cmp	r3, r5
 8004b30:	dcf2      	bgt.n	8004b18 <_printf_i+0x218>
 8004b32:	e7eb      	b.n	8004b0c <_printf_i+0x20c>
 8004b34:	2500      	movs	r5, #0
 8004b36:	f104 0619 	add.w	r6, r4, #25
 8004b3a:	e7f5      	b.n	8004b28 <_printf_i+0x228>
 8004b3c:	08004d0f 	.word	0x08004d0f
 8004b40:	08004d20 	.word	0x08004d20

08004b44 <memmove>:
 8004b44:	4288      	cmp	r0, r1
 8004b46:	b510      	push	{r4, lr}
 8004b48:	eb01 0402 	add.w	r4, r1, r2
 8004b4c:	d902      	bls.n	8004b54 <memmove+0x10>
 8004b4e:	4284      	cmp	r4, r0
 8004b50:	4623      	mov	r3, r4
 8004b52:	d807      	bhi.n	8004b64 <memmove+0x20>
 8004b54:	1e43      	subs	r3, r0, #1
 8004b56:	42a1      	cmp	r1, r4
 8004b58:	d008      	beq.n	8004b6c <memmove+0x28>
 8004b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b62:	e7f8      	b.n	8004b56 <memmove+0x12>
 8004b64:	4601      	mov	r1, r0
 8004b66:	4402      	add	r2, r0
 8004b68:	428a      	cmp	r2, r1
 8004b6a:	d100      	bne.n	8004b6e <memmove+0x2a>
 8004b6c:	bd10      	pop	{r4, pc}
 8004b6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b76:	e7f7      	b.n	8004b68 <memmove+0x24>

08004b78 <_sbrk_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	4d05      	ldr	r5, [pc, #20]	; (8004b94 <_sbrk_r+0x1c>)
 8004b7e:	4604      	mov	r4, r0
 8004b80:	4608      	mov	r0, r1
 8004b82:	602b      	str	r3, [r5, #0]
 8004b84:	f7fc f9a2 	bl	8000ecc <_sbrk>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d102      	bne.n	8004b92 <_sbrk_r+0x1a>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	b103      	cbz	r3, 8004b92 <_sbrk_r+0x1a>
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	bd38      	pop	{r3, r4, r5, pc}
 8004b94:	2000032c 	.word	0x2000032c

08004b98 <memchr>:
 8004b98:	4603      	mov	r3, r0
 8004b9a:	b510      	push	{r4, lr}
 8004b9c:	b2c9      	uxtb	r1, r1
 8004b9e:	4402      	add	r2, r0
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	d101      	bne.n	8004baa <memchr+0x12>
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	e003      	b.n	8004bb2 <memchr+0x1a>
 8004baa:	7804      	ldrb	r4, [r0, #0]
 8004bac:	3301      	adds	r3, #1
 8004bae:	428c      	cmp	r4, r1
 8004bb0:	d1f6      	bne.n	8004ba0 <memchr+0x8>
 8004bb2:	bd10      	pop	{r4, pc}

08004bb4 <memcpy>:
 8004bb4:	440a      	add	r2, r1
 8004bb6:	4291      	cmp	r1, r2
 8004bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bbc:	d100      	bne.n	8004bc0 <memcpy+0xc>
 8004bbe:	4770      	bx	lr
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bc6:	4291      	cmp	r1, r2
 8004bc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bcc:	d1f9      	bne.n	8004bc2 <memcpy+0xe>
 8004bce:	bd10      	pop	{r4, pc}

08004bd0 <_realloc_r>:
 8004bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd4:	4680      	mov	r8, r0
 8004bd6:	4614      	mov	r4, r2
 8004bd8:	460e      	mov	r6, r1
 8004bda:	b921      	cbnz	r1, 8004be6 <_realloc_r+0x16>
 8004bdc:	4611      	mov	r1, r2
 8004bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004be2:	f7ff bc37 	b.w	8004454 <_malloc_r>
 8004be6:	b92a      	cbnz	r2, 8004bf4 <_realloc_r+0x24>
 8004be8:	f7ff fbcc 	bl	8004384 <_free_r>
 8004bec:	4625      	mov	r5, r4
 8004bee:	4628      	mov	r0, r5
 8004bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bf4:	f000 f81b 	bl	8004c2e <_malloc_usable_size_r>
 8004bf8:	4284      	cmp	r4, r0
 8004bfa:	4607      	mov	r7, r0
 8004bfc:	d802      	bhi.n	8004c04 <_realloc_r+0x34>
 8004bfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c02:	d812      	bhi.n	8004c2a <_realloc_r+0x5a>
 8004c04:	4621      	mov	r1, r4
 8004c06:	4640      	mov	r0, r8
 8004c08:	f7ff fc24 	bl	8004454 <_malloc_r>
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d0ed      	beq.n	8004bee <_realloc_r+0x1e>
 8004c12:	42bc      	cmp	r4, r7
 8004c14:	4622      	mov	r2, r4
 8004c16:	4631      	mov	r1, r6
 8004c18:	bf28      	it	cs
 8004c1a:	463a      	movcs	r2, r7
 8004c1c:	f7ff ffca 	bl	8004bb4 <memcpy>
 8004c20:	4631      	mov	r1, r6
 8004c22:	4640      	mov	r0, r8
 8004c24:	f7ff fbae 	bl	8004384 <_free_r>
 8004c28:	e7e1      	b.n	8004bee <_realloc_r+0x1e>
 8004c2a:	4635      	mov	r5, r6
 8004c2c:	e7df      	b.n	8004bee <_realloc_r+0x1e>

08004c2e <_malloc_usable_size_r>:
 8004c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c32:	1f18      	subs	r0, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bfbc      	itt	lt
 8004c38:	580b      	ldrlt	r3, [r1, r0]
 8004c3a:	18c0      	addlt	r0, r0, r3
 8004c3c:	4770      	bx	lr
	...

08004c40 <_init>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	bf00      	nop
 8004c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c46:	bc08      	pop	{r3}
 8004c48:	469e      	mov	lr, r3
 8004c4a:	4770      	bx	lr

08004c4c <_fini>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	bf00      	nop
 8004c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c52:	bc08      	pop	{r3}
 8004c54:	469e      	mov	lr, r3
 8004c56:	4770      	bx	lr
